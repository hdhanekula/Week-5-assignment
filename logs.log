2025-02-20 01:13:58,294:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:13:58,294:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:13:58,294:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:13:58,294:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:14:23,907:INFO:PyCaret ClassificationExperiment
2025-02-20 01:14:23,907:INFO:Logging name: clf-default-name
2025-02-20 01:14:23,943:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:14:23,943:INFO:version 3.3.2
2025-02-20 01:14:23,943:INFO:Initializing setup()
2025-02-20 01:14:23,943:INFO:self.USI: a2cc
2025-02-20 01:14:23,945:INFO:self._variable_keys: {'y_test', 'y', 'y_train', 'fix_imbalance', 'fold_groups_param', 'X', 'gpu_param', 'seed', '_available_plots', 'USI', 'html_param', 'memory', 'n_jobs_param', 'log_plots_param', 'pipeline', 'fold_shuffle_param', 'X_test', 'target_param', 'gpu_n_jobs_param', 'idx', 'is_multiclass', 'logging_param', '_ml_usecase', 'exp_id', 'fold_generator', 'exp_name_log', 'X_train', 'data'}
2025-02-20 01:14:23,945:INFO:Checking environment
2025-02-20 01:14:23,945:INFO:python_version: 3.10.14
2025-02-20 01:14:23,945:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:14:23,946:INFO:machine: AMD64
2025-02-20 01:14:23,946:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:14:23,960:INFO:Memory: svmem(total=16766066688, available=5299032064, percent=68.4, used=11467034624, free=5299032064)
2025-02-20 01:14:23,960:INFO:Physical Core: 12
2025-02-20 01:14:23,960:INFO:Logical Core: 14
2025-02-20 01:14:23,960:INFO:Checking libraries
2025-02-20 01:14:23,960:INFO:System:
2025-02-20 01:14:23,960:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:14:23,966:INFO:executable: c:\Users\harsh\anaconda3\envs\ids\python.exe
2025-02-20 01:14:23,966:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:14:23,966:INFO:PyCaret required dependencies:
2025-02-20 01:14:24,603:INFO:                 pip: 25.0
2025-02-20 01:14:24,603:INFO:          setuptools: 75.8.0
2025-02-20 01:14:24,603:INFO:             pycaret: 3.3.2
2025-02-20 01:14:24,603:INFO:             IPython: 8.32.0
2025-02-20 01:14:24,603:INFO:          ipywidgets: 8.1.5
2025-02-20 01:14:24,603:INFO:                tqdm: 4.67.1
2025-02-20 01:14:24,603:INFO:               numpy: 1.26.4
2025-02-20 01:14:24,603:INFO:              pandas: 2.1.4
2025-02-20 01:14:24,603:INFO:              jinja2: 3.1.5
2025-02-20 01:14:24,603:INFO:               scipy: 1.11.4
2025-02-20 01:14:24,603:INFO:              joblib: 1.3.2
2025-02-20 01:14:24,603:INFO:             sklearn: 1.4.2
2025-02-20 01:14:24,603:INFO:                pyod: 2.0.3
2025-02-20 01:14:24,603:INFO:            imblearn: 0.13.0
2025-02-20 01:14:24,603:INFO:   category_encoders: 2.7.0
2025-02-20 01:14:24,603:INFO:            lightgbm: 4.6.0
2025-02-20 01:14:24,603:INFO:               numba: 0.61.0
2025-02-20 01:14:24,603:INFO:            requests: 2.32.3
2025-02-20 01:14:24,603:INFO:          matplotlib: 3.7.5
2025-02-20 01:14:24,603:INFO:          scikitplot: 0.3.7
2025-02-20 01:14:24,603:INFO:         yellowbrick: 1.5
2025-02-20 01:14:24,603:INFO:              plotly: 5.24.1
2025-02-20 01:14:24,603:INFO:    plotly-resampler: Not installed
2025-02-20 01:14:24,603:INFO:             kaleido: 0.2.1
2025-02-20 01:14:24,603:INFO:           schemdraw: 0.15
2025-02-20 01:14:24,603:INFO:         statsmodels: 0.14.4
2025-02-20 01:14:24,603:INFO:              sktime: 0.26.0
2025-02-20 01:14:24,603:INFO:               tbats: 1.1.3
2025-02-20 01:14:24,603:INFO:            pmdarima: 2.0.4
2025-02-20 01:14:24,603:INFO:              psutil: 6.1.1
2025-02-20 01:14:24,603:INFO:          markupsafe: 3.0.2
2025-02-20 01:14:24,603:INFO:             pickle5: Not installed
2025-02-20 01:14:24,603:INFO:         cloudpickle: 3.1.1
2025-02-20 01:14:24,603:INFO:         deprecation: 2.1.0
2025-02-20 01:14:24,603:INFO:              xxhash: 3.5.0
2025-02-20 01:14:24,603:INFO:           wurlitzer: Not installed
2025-02-20 01:14:24,603:INFO:PyCaret optional dependencies:
2025-02-20 01:14:24,619:INFO:                shap: Not installed
2025-02-20 01:14:24,619:INFO:           interpret: Not installed
2025-02-20 01:14:24,619:INFO:                umap: Not installed
2025-02-20 01:14:24,619:INFO:     ydata_profiling: Not installed
2025-02-20 01:14:24,619:INFO:  explainerdashboard: Not installed
2025-02-20 01:14:24,619:INFO:             autoviz: Not installed
2025-02-20 01:14:24,619:INFO:           fairlearn: Not installed
2025-02-20 01:14:24,619:INFO:          deepchecks: Not installed
2025-02-20 01:14:24,619:INFO:             xgboost: Not installed
2025-02-20 01:14:24,619:INFO:            catboost: Not installed
2025-02-20 01:14:24,619:INFO:              kmodes: Not installed
2025-02-20 01:14:24,619:INFO:             mlxtend: Not installed
2025-02-20 01:14:24,619:INFO:       statsforecast: Not installed
2025-02-20 01:14:24,619:INFO:        tune_sklearn: Not installed
2025-02-20 01:14:24,619:INFO:                 ray: Not installed
2025-02-20 01:14:24,619:INFO:            hyperopt: Not installed
2025-02-20 01:14:24,619:INFO:              optuna: Not installed
2025-02-20 01:14:24,619:INFO:               skopt: Not installed
2025-02-20 01:14:24,619:INFO:              mlflow: Not installed
2025-02-20 01:14:24,619:INFO:              gradio: Not installed
2025-02-20 01:14:24,619:INFO:             fastapi: Not installed
2025-02-20 01:14:24,619:INFO:             uvicorn: Not installed
2025-02-20 01:14:24,619:INFO:              m2cgen: Not installed
2025-02-20 01:14:24,619:INFO:           evidently: Not installed
2025-02-20 01:14:24,619:INFO:               fugue: Not installed
2025-02-20 01:14:24,619:INFO:           streamlit: Not installed
2025-02-20 01:14:24,619:INFO:             prophet: Not installed
2025-02-20 01:14:24,619:INFO:None
2025-02-20 01:14:24,619:INFO:Set up data.
2025-02-20 01:14:24,651:INFO:Set up folding strategy.
2025-02-20 01:14:24,651:INFO:Set up train/test split.
2025-02-20 01:14:24,773:INFO:Set up index.
2025-02-20 01:14:24,773:INFO:Assigning column types.
2025-02-20 01:14:24,773:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:14:24,837:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:14:24,837:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:14:24,884:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:24,884:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:24,934:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:14:24,934:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:14:24,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:24,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:24,968:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:14:25,019:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:14:25,054:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,054:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,120:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:14:25,164:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,164:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:14:25,251:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,251:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,351:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,351:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:25,351:INFO:Preparing preprocessing pipeline...
2025-02-20 01:14:25,351:INFO:Set up label encoding.
2025-02-20 01:14:25,351:INFO:Set up simple imputation.
2025-02-20 01:14:25,351:INFO:Set up encoding of categorical features.
2025-02-20 01:14:25,351:INFO:Set up column name cleaning.
2025-02-20 01:14:25,688:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:14:25,705:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 01:14:25,705:INFO:Creating final display dataframe.
2025-02-20 01:14:26,329:INFO:Setup _display_container:                     Description             Value
0                    Session id              5828
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 16)
6   Transformed train set shape        (4922, 16)
7    Transformed test set shape        (2110, 16)
8              Numeric features                 7
9          Categorical features                 3
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              a2cc
2025-02-20 01:14:26,486:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:26,486:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:26,584:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:26,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:14:26,584:INFO:setup() successfully completed in 2.68s...............
2025-02-20 01:14:36,982:INFO:Initializing compare_models()
2025-02-20 01:14:36,982:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:14:36,982:INFO:Checking exceptions
2025-02-20 01:14:36,997:INFO:Preparing display monitor
2025-02-20 01:14:37,057:INFO:Initializing Logistic Regression
2025-02-20 01:14:37,057:INFO:Total runtime is 0.0 minutes
2025-02-20 01:14:37,065:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:37,065:INFO:Initializing create_model()
2025-02-20 01:14:37,065:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:37,065:INFO:Checking exceptions
2025-02-20 01:14:37,065:INFO:Importing libraries
2025-02-20 01:14:37,065:INFO:Copying training dataset
2025-02-20 01:14:37,089:INFO:Defining folds
2025-02-20 01:14:37,089:INFO:Declaring metric variables
2025-02-20 01:14:37,094:INFO:Importing untrained model
2025-02-20 01:14:37,106:INFO:Logistic Regression Imported successfully
2025-02-20 01:14:37,118:INFO:Starting cross validation
2025-02-20 01:14:37,121:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:42,011:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,050:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,065:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,065:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,081:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,093:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,093:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,110:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,139:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,142:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,155:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,155:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,155:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,179:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,179:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,179:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,211:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,243:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,243:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,243:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:42,243:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,243:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,319:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,342:INFO:Calculating mean and std
2025-02-20 01:14:42,344:INFO:Creating metrics dataframe
2025-02-20 01:14:42,345:INFO:Uploading results into container
2025-02-20 01:14:42,348:INFO:Uploading model into container now
2025-02-20 01:14:42,349:INFO:_master_model_container: 1
2025-02-20 01:14:42,349:INFO:_display_container: 2
2025-02-20 01:14:42,350:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5828, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:14:42,350:INFO:create_model() successfully completed......................................
2025-02-20 01:14:42,465:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:42,465:INFO:Creating metrics dataframe
2025-02-20 01:14:42,473:INFO:Initializing K Neighbors Classifier
2025-02-20 01:14:42,473:INFO:Total runtime is 0.09026841719945272 minutes
2025-02-20 01:14:42,481:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:42,481:INFO:Initializing create_model()
2025-02-20 01:14:42,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:42,482:INFO:Checking exceptions
2025-02-20 01:14:42,482:INFO:Importing libraries
2025-02-20 01:14:42,482:INFO:Copying training dataset
2025-02-20 01:14:42,490:INFO:Defining folds
2025-02-20 01:14:42,491:INFO:Declaring metric variables
2025-02-20 01:14:42,499:INFO:Importing untrained model
2025-02-20 01:14:42,506:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:14:42,520:INFO:Starting cross validation
2025-02-20 01:14:42,524:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:42,938:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,939:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,939:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,941:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,948:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,948:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,951:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,951:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,955:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,955:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,964:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,965:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,965:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,965:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:42,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,848:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,849:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,855:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,856:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,860:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,860:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,860:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,860:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,871:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,871:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,879:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,879:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:45,890:INFO:Calculating mean and std
2025-02-20 01:14:45,893:INFO:Creating metrics dataframe
2025-02-20 01:14:45,894:INFO:Uploading results into container
2025-02-20 01:14:45,894:INFO:Uploading model into container now
2025-02-20 01:14:45,894:INFO:_master_model_container: 2
2025-02-20 01:14:45,894:INFO:_display_container: 2
2025-02-20 01:14:45,894:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:14:45,894:INFO:create_model() successfully completed......................................
2025-02-20 01:14:46,001:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:46,001:INFO:Creating metrics dataframe
2025-02-20 01:14:46,015:INFO:Initializing Naive Bayes
2025-02-20 01:14:46,016:INFO:Total runtime is 0.14931772152582806 minutes
2025-02-20 01:14:46,023:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:46,023:INFO:Initializing create_model()
2025-02-20 01:14:46,023:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:46,024:INFO:Checking exceptions
2025-02-20 01:14:46,024:INFO:Importing libraries
2025-02-20 01:14:46,024:INFO:Copying training dataset
2025-02-20 01:14:46,036:INFO:Defining folds
2025-02-20 01:14:46,036:INFO:Declaring metric variables
2025-02-20 01:14:46,046:INFO:Importing untrained model
2025-02-20 01:14:46,054:INFO:Naive Bayes Imported successfully
2025-02-20 01:14:46,068:INFO:Starting cross validation
2025-02-20 01:14:46,072:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:46,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,342:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,343:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,344:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,349:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,349:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,349:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,351:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,353:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,355:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,355:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,357:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,360:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,361:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,364:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,365:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,365:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,366:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,368:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,368:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,370:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,372:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,375:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,375:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,380:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,383:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,403:INFO:Calculating mean and std
2025-02-20 01:14:46,405:INFO:Creating metrics dataframe
2025-02-20 01:14:46,408:INFO:Uploading results into container
2025-02-20 01:14:46,409:INFO:Uploading model into container now
2025-02-20 01:14:46,410:INFO:_master_model_container: 3
2025-02-20 01:14:46,410:INFO:_display_container: 2
2025-02-20 01:14:46,410:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:14:46,411:INFO:create_model() successfully completed......................................
2025-02-20 01:14:46,494:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:46,495:INFO:Creating metrics dataframe
2025-02-20 01:14:46,505:INFO:Initializing Decision Tree Classifier
2025-02-20 01:14:46,505:INFO:Total runtime is 0.15747654040654502 minutes
2025-02-20 01:14:46,505:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:46,505:INFO:Initializing create_model()
2025-02-20 01:14:46,505:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:46,505:INFO:Checking exceptions
2025-02-20 01:14:46,505:INFO:Importing libraries
2025-02-20 01:14:46,505:INFO:Copying training dataset
2025-02-20 01:14:46,529:INFO:Defining folds
2025-02-20 01:14:46,529:INFO:Declaring metric variables
2025-02-20 01:14:46,535:INFO:Importing untrained model
2025-02-20 01:14:46,548:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:14:46,559:INFO:Starting cross validation
2025-02-20 01:14:46,567:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:46,801:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,801:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,801:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,801:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,817:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,818:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,818:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,818:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,818:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,818:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,825:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,825:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,827:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,829:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,831:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,856:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,856:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,863:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,866:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:46,869:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:46,887:INFO:Calculating mean and std
2025-02-20 01:14:46,890:INFO:Creating metrics dataframe
2025-02-20 01:14:46,892:INFO:Uploading results into container
2025-02-20 01:14:46,893:INFO:Uploading model into container now
2025-02-20 01:14:46,894:INFO:_master_model_container: 4
2025-02-20 01:14:46,894:INFO:_display_container: 2
2025-02-20 01:14:46,895:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=5828, splitter='best')
2025-02-20 01:14:46,896:INFO:create_model() successfully completed......................................
2025-02-20 01:14:47,005:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:47,005:INFO:Creating metrics dataframe
2025-02-20 01:14:47,014:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:14:47,014:INFO:Total runtime is 0.1659536639849345 minutes
2025-02-20 01:14:47,030:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:47,030:INFO:Initializing create_model()
2025-02-20 01:14:47,030:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:47,030:INFO:Checking exceptions
2025-02-20 01:14:47,030:INFO:Importing libraries
2025-02-20 01:14:47,030:INFO:Copying training dataset
2025-02-20 01:14:47,030:INFO:Defining folds
2025-02-20 01:14:47,030:INFO:Declaring metric variables
2025-02-20 01:14:47,048:INFO:Importing untrained model
2025-02-20 01:14:47,059:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:14:47,076:INFO:Starting cross validation
2025-02-20 01:14:47,082:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:47,429:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,429:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,445:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,475:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,478:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,478:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,478:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,481:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,483:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,483:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,483:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,483:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,493:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,507:INFO:Calculating mean and std
2025-02-20 01:14:47,509:INFO:Creating metrics dataframe
2025-02-20 01:14:47,513:INFO:Uploading results into container
2025-02-20 01:14:47,513:INFO:Uploading model into container now
2025-02-20 01:14:47,514:INFO:_master_model_container: 5
2025-02-20 01:14:47,514:INFO:_display_container: 2
2025-02-20 01:14:47,515:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=5828, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:14:47,515:INFO:create_model() successfully completed......................................
2025-02-20 01:14:47,632:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:47,632:INFO:Creating metrics dataframe
2025-02-20 01:14:47,643:INFO:Initializing Ridge Classifier
2025-02-20 01:14:47,643:INFO:Total runtime is 0.17642899751663207 minutes
2025-02-20 01:14:47,648:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:47,649:INFO:Initializing create_model()
2025-02-20 01:14:47,649:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:47,649:INFO:Checking exceptions
2025-02-20 01:14:47,650:INFO:Importing libraries
2025-02-20 01:14:47,650:INFO:Copying training dataset
2025-02-20 01:14:47,659:INFO:Defining folds
2025-02-20 01:14:47,660:INFO:Declaring metric variables
2025-02-20 01:14:47,667:INFO:Importing untrained model
2025-02-20 01:14:47,673:INFO:Ridge Classifier Imported successfully
2025-02-20 01:14:47,686:INFO:Starting cross validation
2025-02-20 01:14:47,692:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:47,931:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,939:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,945:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,950:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,954:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,955:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,955:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,967:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,967:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,967:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,967:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,970:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,970:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,970:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,970:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,972:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,973:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,973:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,974:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,977:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,977:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,980:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,980:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,980:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,980:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,983:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,984:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,984:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:47,985:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,987:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:47,988:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:48,008:INFO:Calculating mean and std
2025-02-20 01:14:48,010:INFO:Creating metrics dataframe
2025-02-20 01:14:48,013:INFO:Uploading results into container
2025-02-20 01:14:48,014:INFO:Uploading model into container now
2025-02-20 01:14:48,014:INFO:_master_model_container: 6
2025-02-20 01:14:48,015:INFO:_display_container: 2
2025-02-20 01:14:48,015:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=5828, solver='auto',
                tol=0.0001)
2025-02-20 01:14:48,015:INFO:create_model() successfully completed......................................
2025-02-20 01:14:48,107:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:48,107:INFO:Creating metrics dataframe
2025-02-20 01:14:48,112:INFO:Initializing Random Forest Classifier
2025-02-20 01:14:48,112:INFO:Total runtime is 0.18425569136937459 minutes
2025-02-20 01:14:48,129:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:48,130:INFO:Initializing create_model()
2025-02-20 01:14:48,130:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:48,130:INFO:Checking exceptions
2025-02-20 01:14:48,130:INFO:Importing libraries
2025-02-20 01:14:48,130:INFO:Copying training dataset
2025-02-20 01:14:48,134:INFO:Defining folds
2025-02-20 01:14:48,134:INFO:Declaring metric variables
2025-02-20 01:14:48,150:INFO:Importing untrained model
2025-02-20 01:14:48,163:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:14:48,185:INFO:Starting cross validation
2025-02-20 01:14:48,189:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:49,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,077:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,090:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,094:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,094:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,179:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,179:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,187:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,187:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,190:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,197:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,198:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,198:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,202:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,205:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,207:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,210:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,210:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,214:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,215:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,236:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,240:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,244:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,291:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,299:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,302:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,306:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,329:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,346:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,350:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,353:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,368:INFO:Calculating mean and std
2025-02-20 01:14:49,368:INFO:Creating metrics dataframe
2025-02-20 01:14:49,373:INFO:Uploading results into container
2025-02-20 01:14:49,374:INFO:Uploading model into container now
2025-02-20 01:14:49,375:INFO:_master_model_container: 7
2025-02-20 01:14:49,375:INFO:_display_container: 2
2025-02-20 01:14:49,375:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=5828, verbose=0,
                       warm_start=False)
2025-02-20 01:14:49,377:INFO:create_model() successfully completed......................................
2025-02-20 01:14:49,470:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:49,470:INFO:Creating metrics dataframe
2025-02-20 01:14:49,486:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:14:49,486:INFO:Total runtime is 0.20715200106302897 minutes
2025-02-20 01:14:49,492:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:49,494:INFO:Initializing create_model()
2025-02-20 01:14:49,494:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:49,495:INFO:Checking exceptions
2025-02-20 01:14:49,495:INFO:Importing libraries
2025-02-20 01:14:49,495:INFO:Copying training dataset
2025-02-20 01:14:49,499:INFO:Defining folds
2025-02-20 01:14:49,499:INFO:Declaring metric variables
2025-02-20 01:14:49,499:INFO:Importing untrained model
2025-02-20 01:14:49,518:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:14:49,535:INFO:Starting cross validation
2025-02-20 01:14:49,539:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:49,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,730:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,730:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,746:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,747:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,747:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,747:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,760:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:14:49,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,808:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,811:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,811:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,811:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,832:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,832:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,832:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,832:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,836:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,837:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:49,839:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:49,856:INFO:Calculating mean and std
2025-02-20 01:14:49,858:INFO:Creating metrics dataframe
2025-02-20 01:14:49,861:INFO:Uploading results into container
2025-02-20 01:14:49,861:INFO:Uploading model into container now
2025-02-20 01:14:49,862:INFO:_master_model_container: 8
2025-02-20 01:14:49,862:INFO:_display_container: 2
2025-02-20 01:14:49,862:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:14:49,862:INFO:create_model() successfully completed......................................
2025-02-20 01:14:49,941:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:49,941:INFO:Creating metrics dataframe
2025-02-20 01:14:49,958:INFO:Initializing Ada Boost Classifier
2025-02-20 01:14:49,958:INFO:Total runtime is 0.2150229295094808 minutes
2025-02-20 01:14:49,958:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:49,958:INFO:Initializing create_model()
2025-02-20 01:14:49,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:49,958:INFO:Checking exceptions
2025-02-20 01:14:49,958:INFO:Importing libraries
2025-02-20 01:14:49,958:INFO:Copying training dataset
2025-02-20 01:14:49,981:INFO:Defining folds
2025-02-20 01:14:49,981:INFO:Declaring metric variables
2025-02-20 01:14:49,997:INFO:Importing untrained model
2025-02-20 01:14:50,005:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:14:50,021:INFO:Starting cross validation
2025-02-20 01:14:50,027:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:50,205:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,232:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,232:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,232:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,232:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,232:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:14:50,291:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,308:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,308:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,308:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,315:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,315:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,325:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,332:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,337:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,338:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,343:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,343:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,346:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,347:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:50,349:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:50,373:INFO:Calculating mean and std
2025-02-20 01:14:50,378:INFO:Creating metrics dataframe
2025-02-20 01:14:50,381:INFO:Uploading results into container
2025-02-20 01:14:50,382:INFO:Uploading model into container now
2025-02-20 01:14:50,384:INFO:_master_model_container: 9
2025-02-20 01:14:50,384:INFO:_display_container: 2
2025-02-20 01:14:50,384:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=5828)
2025-02-20 01:14:50,384:INFO:create_model() successfully completed......................................
2025-02-20 01:14:50,459:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:50,459:INFO:Creating metrics dataframe
2025-02-20 01:14:50,487:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:14:50,487:INFO:Total runtime is 0.2238422671953837 minutes
2025-02-20 01:14:50,499:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:50,499:INFO:Initializing create_model()
2025-02-20 01:14:50,499:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:50,499:INFO:Checking exceptions
2025-02-20 01:14:50,499:INFO:Importing libraries
2025-02-20 01:14:50,499:INFO:Copying training dataset
2025-02-20 01:14:50,512:INFO:Defining folds
2025-02-20 01:14:50,512:INFO:Declaring metric variables
2025-02-20 01:14:50,519:INFO:Importing untrained model
2025-02-20 01:14:50,534:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:14:50,547:INFO:Starting cross validation
2025-02-20 01:14:50,553:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:51,441:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,450:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,452:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,454:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,458:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,458:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,461:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,521:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,524:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,530:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:51,534:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:51,554:INFO:Calculating mean and std
2025-02-20 01:14:51,573:INFO:Creating metrics dataframe
2025-02-20 01:14:51,578:INFO:Uploading results into container
2025-02-20 01:14:51,579:INFO:Uploading model into container now
2025-02-20 01:14:51,580:INFO:_master_model_container: 10
2025-02-20 01:14:51,580:INFO:_display_container: 2
2025-02-20 01:14:51,581:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=5828, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:14:51,582:INFO:create_model() successfully completed......................................
2025-02-20 01:14:51,664:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:51,664:INFO:Creating metrics dataframe
2025-02-20 01:14:51,696:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:14:51,696:INFO:Total runtime is 0.2439939220746358 minutes
2025-02-20 01:14:51,699:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:51,708:INFO:Initializing create_model()
2025-02-20 01:14:51,708:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:51,708:INFO:Checking exceptions
2025-02-20 01:14:51,708:INFO:Importing libraries
2025-02-20 01:14:51,708:INFO:Copying training dataset
2025-02-20 01:14:51,733:INFO:Defining folds
2025-02-20 01:14:51,733:INFO:Declaring metric variables
2025-02-20 01:14:51,746:INFO:Importing untrained model
2025-02-20 01:14:51,758:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:14:51,777:INFO:Starting cross validation
2025-02-20 01:14:51,778:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:52,007:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,023:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,023:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,023:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,023:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,023:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,023:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,038:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,055:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,055:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,056:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,056:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,058:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,061:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,061:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,062:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,063:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,063:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,064:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,066:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,066:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,067:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,070:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,071:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,071:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,076:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,085:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,088:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,092:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,108:INFO:Calculating mean and std
2025-02-20 01:14:52,111:INFO:Creating metrics dataframe
2025-02-20 01:14:52,114:INFO:Uploading results into container
2025-02-20 01:14:52,114:INFO:Uploading model into container now
2025-02-20 01:14:52,115:INFO:_master_model_container: 11
2025-02-20 01:14:52,115:INFO:_display_container: 2
2025-02-20 01:14:52,115:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:14:52,116:INFO:create_model() successfully completed......................................
2025-02-20 01:14:52,216:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:52,216:INFO:Creating metrics dataframe
2025-02-20 01:14:52,241:INFO:Initializing Extra Trees Classifier
2025-02-20 01:14:52,241:INFO:Total runtime is 0.25307288964589436 minutes
2025-02-20 01:14:52,245:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:52,245:INFO:Initializing create_model()
2025-02-20 01:14:52,245:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:52,245:INFO:Checking exceptions
2025-02-20 01:14:52,245:INFO:Importing libraries
2025-02-20 01:14:52,245:INFO:Copying training dataset
2025-02-20 01:14:52,260:INFO:Defining folds
2025-02-20 01:14:52,260:INFO:Declaring metric variables
2025-02-20 01:14:52,260:INFO:Importing untrained model
2025-02-20 01:14:52,279:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:14:52,291:INFO:Starting cross validation
2025-02-20 01:14:52,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:52,948:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,958:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,958:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,958:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,958:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,975:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:52,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,985:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,994:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:52,997:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:53,002:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,046:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,046:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,054:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,054:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,058:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:53,058:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:53,061:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,062:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,092:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:53,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:53,131:INFO:Calculating mean and std
2025-02-20 01:14:53,131:INFO:Creating metrics dataframe
2025-02-20 01:14:53,131:INFO:Uploading results into container
2025-02-20 01:14:53,131:INFO:Uploading model into container now
2025-02-20 01:14:53,131:INFO:_master_model_container: 12
2025-02-20 01:14:53,131:INFO:_display_container: 2
2025-02-20 01:14:53,142:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=5828, verbose=0,
                     warm_start=False)
2025-02-20 01:14:53,142:INFO:create_model() successfully completed......................................
2025-02-20 01:14:53,253:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:53,253:INFO:Creating metrics dataframe
2025-02-20 01:14:53,283:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:14:53,283:INFO:Total runtime is 0.27044222354888914 minutes
2025-02-20 01:14:53,293:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:53,293:INFO:Initializing create_model()
2025-02-20 01:14:53,293:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:53,293:INFO:Checking exceptions
2025-02-20 01:14:53,293:INFO:Importing libraries
2025-02-20 01:14:53,293:INFO:Copying training dataset
2025-02-20 01:14:53,317:INFO:Defining folds
2025-02-20 01:14:53,317:INFO:Declaring metric variables
2025-02-20 01:14:53,329:INFO:Importing untrained model
2025-02-20 01:14:53,337:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:14:53,342:INFO:Starting cross validation
2025-02-20 01:14:53,356:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:54,009:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,012:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,020:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,026:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,036:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,052:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,052:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,052:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,068:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,076:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,077:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,077:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,077:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,085:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,085:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,085:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,092:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,092:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,092:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,133:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,142:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,158:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,158:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,174:INFO:Calculating mean and std
2025-02-20 01:14:54,175:INFO:Creating metrics dataframe
2025-02-20 01:14:54,175:INFO:Uploading results into container
2025-02-20 01:14:54,175:INFO:Uploading model into container now
2025-02-20 01:14:54,175:INFO:_master_model_container: 13
2025-02-20 01:14:54,182:INFO:_display_container: 2
2025-02-20 01:14:54,182:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=5828, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:14:54,182:INFO:create_model() successfully completed......................................
2025-02-20 01:14:54,334:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:54,334:INFO:Creating metrics dataframe
2025-02-20 01:14:54,348:INFO:Initializing Dummy Classifier
2025-02-20 01:14:54,348:INFO:Total runtime is 0.28819396893183385 minutes
2025-02-20 01:14:54,361:INFO:SubProcess create_model() called ==================================
2025-02-20 01:14:54,361:INFO:Initializing create_model()
2025-02-20 01:14:54,361:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255F4612680>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:54,362:INFO:Checking exceptions
2025-02-20 01:14:54,362:INFO:Importing libraries
2025-02-20 01:14:54,362:INFO:Copying training dataset
2025-02-20 01:14:54,371:INFO:Defining folds
2025-02-20 01:14:54,371:INFO:Declaring metric variables
2025-02-20 01:14:54,380:INFO:Importing untrained model
2025-02-20 01:14:54,385:INFO:Dummy Classifier Imported successfully
2025-02-20 01:14:54,416:INFO:Starting cross validation
2025-02-20 01:14:54,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:14:54,623:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:14:54,692:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,695:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:14:54,710:INFO:Calculating mean and std
2025-02-20 01:14:54,712:INFO:Creating metrics dataframe
2025-02-20 01:14:54,714:INFO:Uploading results into container
2025-02-20 01:14:54,716:INFO:Uploading model into container now
2025-02-20 01:14:54,716:INFO:_master_model_container: 14
2025-02-20 01:14:54,716:INFO:_display_container: 2
2025-02-20 01:14:54,717:INFO:DummyClassifier(constant=None, random_state=5828, strategy='prior')
2025-02-20 01:14:54,717:INFO:create_model() successfully completed......................................
2025-02-20 01:14:54,797:INFO:SubProcess create_model() end ==================================
2025-02-20 01:14:54,797:INFO:Creating metrics dataframe
2025-02-20 01:14:54,808:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:14:54,839:INFO:Initializing create_model()
2025-02-20 01:14:54,839:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5828, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:14:54,839:INFO:Checking exceptions
2025-02-20 01:14:54,839:INFO:Importing libraries
2025-02-20 01:14:54,848:INFO:Copying training dataset
2025-02-20 01:14:54,856:INFO:Defining folds
2025-02-20 01:14:54,856:INFO:Declaring metric variables
2025-02-20 01:14:54,856:INFO:Importing untrained model
2025-02-20 01:14:54,856:INFO:Declaring custom model
2025-02-20 01:14:54,858:INFO:Logistic Regression Imported successfully
2025-02-20 01:14:54,862:INFO:Cross validation set to False
2025-02-20 01:14:54,862:INFO:Fitting Model
2025-02-20 01:14:55,890:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:14:55,893:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5828, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:14:55,893:INFO:create_model() successfully completed......................................
2025-02-20 01:14:56,047:INFO:_master_model_container: 14
2025-02-20 01:14:56,047:INFO:_display_container: 2
2025-02-20 01:14:56,047:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5828, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:14:56,047:INFO:compare_models() successfully completed......................................
2025-02-20 01:15:07,560:INFO:Initializing predict_model()
2025-02-20 01:15:07,561:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5828, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000255F4D72E60>)
2025-02-20 01:15:07,561:INFO:Checking exceptions
2025-02-20 01:15:07,561:INFO:Preloading libraries
2025-02-20 01:15:07,566:INFO:Set up data.
2025-02-20 01:15:07,580:INFO:Set up index.
2025-02-20 01:15:07,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 01:15:07,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:15:07,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:15:07,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:15:07,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:15:07,725:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:15:07,739:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:15:07,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 01:15:07,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 01:15:07,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 01:15:20,414:INFO:Initializing save_model()
2025-02-20 01:15:20,414:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=5828, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:15:20,414:INFO:Adding model into prep_pipe
2025-02-20 01:15:20,454:INFO:LDA.pkl saved in current working directory
2025-02-20 01:15:20,464:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleIm...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=5828,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:15:20,472:INFO:save_model() successfully completed......................................
2025-02-20 01:16:11,770:INFO:Initializing load_model()
2025-02-20 01:16:11,778:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 01:16:27,249:INFO:Initializing predict_model()
2025-02-20 01:16:27,249:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255F4B3A2F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=5828,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000255FA571EA0>)
2025-02-20 01:16:27,249:INFO:Checking exceptions
2025-02-20 01:16:27,249:INFO:Preloading libraries
2025-02-20 01:16:27,260:INFO:Set up data.
2025-02-20 01:16:27,269:INFO:Set up index.
2025-02-20 01:17:45,639:INFO:Initializing load_model()
2025-02-20 01:17:45,640:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:18:02,896:INFO:Initializing load_model()
2025-02-20 01:18:02,896:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:22:23,614:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:22:23,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:22:23,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:22:23,615:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:22:24,258:INFO:PyCaret ClassificationExperiment
2025-02-20 01:22:24,264:INFO:Logging name: clf-default-name
2025-02-20 01:22:24,264:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:22:24,264:INFO:version 3.3.2
2025-02-20 01:22:24,268:INFO:Initializing setup()
2025-02-20 01:22:24,268:INFO:self.USI: 260f
2025-02-20 01:22:24,268:INFO:self._variable_keys: {'X_train', 'pipeline', 'fix_imbalance', 'logging_param', 'log_plots_param', 'data', '_ml_usecase', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'USI', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'y_train', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'exp_id', 'n_jobs_param', 'exp_name_log', '_available_plots', 'y', 'seed', 'y_test', 'is_multiclass'}
2025-02-20 01:22:24,271:INFO:Checking environment
2025-02-20 01:22:24,272:INFO:python_version: 3.10.14
2025-02-20 01:22:24,272:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:22:24,273:INFO:machine: AMD64
2025-02-20 01:22:24,274:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:22:24,283:INFO:Memory: svmem(total=16766066688, available=5090062336, percent=69.6, used=11676004352, free=5090062336)
2025-02-20 01:22:24,283:INFO:Physical Core: 12
2025-02-20 01:22:24,283:INFO:Logical Core: 14
2025-02-20 01:22:24,283:INFO:Checking libraries
2025-02-20 01:22:24,283:INFO:System:
2025-02-20 01:22:24,283:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:22:24,283:INFO:executable: c:\Users\harsh\anaconda3\envs\ids\python.exe
2025-02-20 01:22:24,283:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:22:24,283:INFO:PyCaret required dependencies:
2025-02-20 01:22:24,325:INFO:                 pip: 25.0
2025-02-20 01:22:24,325:INFO:          setuptools: 75.8.0
2025-02-20 01:22:24,325:INFO:             pycaret: 3.3.2
2025-02-20 01:22:24,325:INFO:             IPython: 8.32.0
2025-02-20 01:22:24,325:INFO:          ipywidgets: 8.1.5
2025-02-20 01:22:24,325:INFO:                tqdm: 4.67.1
2025-02-20 01:22:24,325:INFO:               numpy: 1.26.4
2025-02-20 01:22:24,330:INFO:              pandas: 2.1.4
2025-02-20 01:22:24,330:INFO:              jinja2: 3.1.5
2025-02-20 01:22:24,330:INFO:               scipy: 1.11.4
2025-02-20 01:22:24,331:INFO:              joblib: 1.3.2
2025-02-20 01:22:24,331:INFO:             sklearn: 1.4.2
2025-02-20 01:22:24,331:INFO:                pyod: 2.0.3
2025-02-20 01:22:24,331:INFO:            imblearn: 0.13.0
2025-02-20 01:22:24,331:INFO:   category_encoders: 2.7.0
2025-02-20 01:22:24,331:INFO:            lightgbm: 4.6.0
2025-02-20 01:22:24,331:INFO:               numba: 0.61.0
2025-02-20 01:22:24,331:INFO:            requests: 2.32.3
2025-02-20 01:22:24,331:INFO:          matplotlib: 3.7.5
2025-02-20 01:22:24,331:INFO:          scikitplot: 0.3.7
2025-02-20 01:22:24,331:INFO:         yellowbrick: 1.5
2025-02-20 01:22:24,331:INFO:              plotly: 5.24.1
2025-02-20 01:22:24,331:INFO:    plotly-resampler: Not installed
2025-02-20 01:22:24,333:INFO:             kaleido: 0.2.1
2025-02-20 01:22:24,333:INFO:           schemdraw: 0.15
2025-02-20 01:22:24,333:INFO:         statsmodels: 0.14.4
2025-02-20 01:22:24,333:INFO:              sktime: 0.26.0
2025-02-20 01:22:24,333:INFO:               tbats: 1.1.3
2025-02-20 01:22:24,334:INFO:            pmdarima: 2.0.4
2025-02-20 01:22:24,334:INFO:              psutil: 6.1.1
2025-02-20 01:22:24,334:INFO:          markupsafe: 3.0.2
2025-02-20 01:22:24,334:INFO:             pickle5: Not installed
2025-02-20 01:22:24,334:INFO:         cloudpickle: 3.1.1
2025-02-20 01:22:24,335:INFO:         deprecation: 2.1.0
2025-02-20 01:22:24,335:INFO:              xxhash: 3.5.0
2025-02-20 01:22:24,335:INFO:           wurlitzer: Not installed
2025-02-20 01:22:24,335:INFO:PyCaret optional dependencies:
2025-02-20 01:22:24,358:INFO:                shap: Not installed
2025-02-20 01:22:24,358:INFO:           interpret: Not installed
2025-02-20 01:22:24,358:INFO:                umap: Not installed
2025-02-20 01:22:24,358:INFO:     ydata_profiling: Not installed
2025-02-20 01:22:24,358:INFO:  explainerdashboard: Not installed
2025-02-20 01:22:24,358:INFO:             autoviz: Not installed
2025-02-20 01:22:24,358:INFO:           fairlearn: Not installed
2025-02-20 01:22:24,358:INFO:          deepchecks: Not installed
2025-02-20 01:22:24,358:INFO:             xgboost: Not installed
2025-02-20 01:22:24,358:INFO:            catboost: Not installed
2025-02-20 01:22:24,358:INFO:              kmodes: Not installed
2025-02-20 01:22:24,358:INFO:             mlxtend: Not installed
2025-02-20 01:22:24,358:INFO:       statsforecast: Not installed
2025-02-20 01:22:24,358:INFO:        tune_sklearn: Not installed
2025-02-20 01:22:24,358:INFO:                 ray: Not installed
2025-02-20 01:22:24,358:INFO:            hyperopt: Not installed
2025-02-20 01:22:24,358:INFO:              optuna: Not installed
2025-02-20 01:22:24,358:INFO:               skopt: Not installed
2025-02-20 01:22:24,358:INFO:              mlflow: Not installed
2025-02-20 01:22:24,358:INFO:              gradio: Not installed
2025-02-20 01:22:24,358:INFO:             fastapi: Not installed
2025-02-20 01:22:24,358:INFO:             uvicorn: Not installed
2025-02-20 01:22:24,358:INFO:              m2cgen: Not installed
2025-02-20 01:22:24,358:INFO:           evidently: Not installed
2025-02-20 01:22:24,358:INFO:               fugue: Not installed
2025-02-20 01:22:24,358:INFO:           streamlit: Not installed
2025-02-20 01:22:24,358:INFO:             prophet: Not installed
2025-02-20 01:22:24,358:INFO:None
2025-02-20 01:22:24,358:INFO:Set up data.
2025-02-20 01:22:24,391:INFO:Set up folding strategy.
2025-02-20 01:22:24,391:INFO:Set up train/test split.
2025-02-20 01:22:24,416:INFO:Set up index.
2025-02-20 01:22:24,416:INFO:Assigning column types.
2025-02-20 01:22:24,430:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:22:24,488:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:22:24,493:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:22:24,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,535:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,593:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:22:24,593:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:22:24,644:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,644:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:22:24,708:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:22:24,737:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,737:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,811:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:22:24,854:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,854:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,854:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:22:24,960:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:24,960:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:25,155:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:25,155:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:25,163:INFO:Preparing preprocessing pipeline...
2025-02-20 01:22:25,167:INFO:Set up label encoding.
2025-02-20 01:22:25,167:INFO:Set up simple imputation.
2025-02-20 01:22:25,171:INFO:Set up encoding of categorical features.
2025-02-20 01:22:25,171:INFO:Set up column name cleaning.
2025-02-20 01:22:25,443:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:22:25,459:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 01:22:25,459:INFO:Creating final display dataframe.
2025-02-20 01:22:26,090:INFO:Setup _display_container:                     Description             Value
0                    Session id              2154
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 16)
6   Transformed train set shape        (4922, 16)
7    Transformed test set shape        (2110, 16)
8              Numeric features                 7
9          Categorical features                 3
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              260f
2025-02-20 01:22:26,216:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:26,216:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:26,303:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:26,303:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:22:26,303:INFO:setup() successfully completed in 2.05s...............
2025-02-20 01:22:26,334:INFO:Initializing compare_models()
2025-02-20 01:22:26,334:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:22:26,334:INFO:Checking exceptions
2025-02-20 01:22:26,347:INFO:Preparing display monitor
2025-02-20 01:22:26,397:INFO:Initializing Logistic Regression
2025-02-20 01:22:26,397:INFO:Total runtime is 0.0 minutes
2025-02-20 01:22:26,408:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:26,408:INFO:Initializing create_model()
2025-02-20 01:22:26,408:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:26,408:INFO:Checking exceptions
2025-02-20 01:22:26,408:INFO:Importing libraries
2025-02-20 01:22:26,408:INFO:Copying training dataset
2025-02-20 01:22:26,422:INFO:Defining folds
2025-02-20 01:22:26,422:INFO:Declaring metric variables
2025-02-20 01:22:26,430:INFO:Importing untrained model
2025-02-20 01:22:26,430:INFO:Logistic Regression Imported successfully
2025-02-20 01:22:26,446:INFO:Starting cross validation
2025-02-20 01:22:26,450:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:33,057:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,057:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,127:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,127:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,127:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,159:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,159:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,159:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,159:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:33,206:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,206:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,206:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,222:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,238:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,238:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,238:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,253:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,253:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,269:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,284:INFO:Calculating mean and std
2025-02-20 01:22:33,284:INFO:Creating metrics dataframe
2025-02-20 01:22:33,284:INFO:Uploading results into container
2025-02-20 01:22:33,291:INFO:Uploading model into container now
2025-02-20 01:22:33,291:INFO:_master_model_container: 1
2025-02-20 01:22:33,293:INFO:_display_container: 2
2025-02-20 01:22:33,293:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:22:33,293:INFO:create_model() successfully completed......................................
2025-02-20 01:22:33,388:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:33,388:INFO:Creating metrics dataframe
2025-02-20 01:22:33,395:INFO:Initializing K Neighbors Classifier
2025-02-20 01:22:33,395:INFO:Total runtime is 0.11662725607554118 minutes
2025-02-20 01:22:33,404:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:33,404:INFO:Initializing create_model()
2025-02-20 01:22:33,404:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:33,404:INFO:Checking exceptions
2025-02-20 01:22:33,404:INFO:Importing libraries
2025-02-20 01:22:33,404:INFO:Copying training dataset
2025-02-20 01:22:33,404:INFO:Defining folds
2025-02-20 01:22:33,404:INFO:Declaring metric variables
2025-02-20 01:22:33,428:INFO:Importing untrained model
2025-02-20 01:22:33,430:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:22:33,458:INFO:Starting cross validation
2025-02-20 01:22:33,461:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:33,910:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,910:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,910:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,931:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,932:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,932:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,940:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,941:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,941:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,956:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,956:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,972:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,972:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:33,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,090:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,090:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,120:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,120:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,152:INFO:Calculating mean and std
2025-02-20 01:22:37,158:INFO:Creating metrics dataframe
2025-02-20 01:22:37,162:INFO:Uploading results into container
2025-02-20 01:22:37,162:INFO:Uploading model into container now
2025-02-20 01:22:37,162:INFO:_master_model_container: 2
2025-02-20 01:22:37,162:INFO:_display_container: 2
2025-02-20 01:22:37,165:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:22:37,165:INFO:create_model() successfully completed......................................
2025-02-20 01:22:37,258:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:37,259:INFO:Creating metrics dataframe
2025-02-20 01:22:37,270:INFO:Initializing Naive Bayes
2025-02-20 01:22:37,270:INFO:Total runtime is 0.18122489054997762 minutes
2025-02-20 01:22:37,279:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:37,279:INFO:Initializing create_model()
2025-02-20 01:22:37,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:37,279:INFO:Checking exceptions
2025-02-20 01:22:37,279:INFO:Importing libraries
2025-02-20 01:22:37,279:INFO:Copying training dataset
2025-02-20 01:22:37,279:INFO:Defining folds
2025-02-20 01:22:37,279:INFO:Declaring metric variables
2025-02-20 01:22:37,301:INFO:Importing untrained model
2025-02-20 01:22:37,316:INFO:Naive Bayes Imported successfully
2025-02-20 01:22:37,329:INFO:Starting cross validation
2025-02-20 01:22:37,333:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:37,576:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,576:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,576:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,576:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,591:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,591:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,591:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,596:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,596:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,598:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,607:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,609:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,625:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,625:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,625:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:37,655:INFO:Calculating mean and std
2025-02-20 01:22:37,658:INFO:Creating metrics dataframe
2025-02-20 01:22:37,658:INFO:Uploading results into container
2025-02-20 01:22:37,658:INFO:Uploading model into container now
2025-02-20 01:22:37,658:INFO:_master_model_container: 3
2025-02-20 01:22:37,658:INFO:_display_container: 2
2025-02-20 01:22:37,658:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:22:37,658:INFO:create_model() successfully completed......................................
2025-02-20 01:22:37,742:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:37,742:INFO:Creating metrics dataframe
2025-02-20 01:22:37,754:INFO:Initializing Decision Tree Classifier
2025-02-20 01:22:37,754:INFO:Total runtime is 0.1892813762029012 minutes
2025-02-20 01:22:37,762:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:37,762:INFO:Initializing create_model()
2025-02-20 01:22:37,762:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:37,762:INFO:Checking exceptions
2025-02-20 01:22:37,762:INFO:Importing libraries
2025-02-20 01:22:37,762:INFO:Copying training dataset
2025-02-20 01:22:37,781:INFO:Defining folds
2025-02-20 01:22:37,816:INFO:Declaring metric variables
2025-02-20 01:22:37,826:INFO:Importing untrained model
2025-02-20 01:22:37,834:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:22:37,850:INFO:Starting cross validation
2025-02-20 01:22:37,850:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:38,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,100:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,108:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,109:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,122:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,122:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,124:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,139:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,139:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,141:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,141:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,141:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,155:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,155:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:38,158:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,158:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,158:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,174:INFO:Calculating mean and std
2025-02-20 01:22:38,175:INFO:Creating metrics dataframe
2025-02-20 01:22:38,180:INFO:Uploading results into container
2025-02-20 01:22:38,180:INFO:Uploading model into container now
2025-02-20 01:22:38,180:INFO:_master_model_container: 4
2025-02-20 01:22:38,180:INFO:_display_container: 2
2025-02-20 01:22:38,180:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=2154, splitter='best')
2025-02-20 01:22:38,180:INFO:create_model() successfully completed......................................
2025-02-20 01:22:38,263:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:38,263:INFO:Creating metrics dataframe
2025-02-20 01:22:38,279:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:22:38,279:INFO:Total runtime is 0.19804204702377318 minutes
2025-02-20 01:22:38,292:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:38,292:INFO:Initializing create_model()
2025-02-20 01:22:38,292:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:38,292:INFO:Checking exceptions
2025-02-20 01:22:38,292:INFO:Importing libraries
2025-02-20 01:22:38,292:INFO:Copying training dataset
2025-02-20 01:22:38,296:INFO:Defining folds
2025-02-20 01:22:38,296:INFO:Declaring metric variables
2025-02-20 01:22:38,310:INFO:Importing untrained model
2025-02-20 01:22:38,310:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:22:38,328:INFO:Starting cross validation
2025-02-20 01:22:38,339:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:38,630:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,641:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,641:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,647:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,647:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,655:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,658:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,658:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,658:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,658:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,663:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,671:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,675:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,675:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,675:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,675:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,675:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:38,703:INFO:Calculating mean and std
2025-02-20 01:22:38,703:INFO:Creating metrics dataframe
2025-02-20 01:22:38,708:INFO:Uploading results into container
2025-02-20 01:22:38,708:INFO:Uploading model into container now
2025-02-20 01:22:38,708:INFO:_master_model_container: 5
2025-02-20 01:22:38,708:INFO:_display_container: 2
2025-02-20 01:22:38,708:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=2154, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:22:38,708:INFO:create_model() successfully completed......................................
2025-02-20 01:22:38,796:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:38,796:INFO:Creating metrics dataframe
2025-02-20 01:22:38,808:INFO:Initializing Ridge Classifier
2025-02-20 01:22:38,808:INFO:Total runtime is 0.20685662031173704 minutes
2025-02-20 01:22:38,820:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:38,820:INFO:Initializing create_model()
2025-02-20 01:22:38,820:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:38,820:INFO:Checking exceptions
2025-02-20 01:22:38,820:INFO:Importing libraries
2025-02-20 01:22:38,820:INFO:Copying training dataset
2025-02-20 01:22:38,836:INFO:Defining folds
2025-02-20 01:22:38,838:INFO:Declaring metric variables
2025-02-20 01:22:38,838:INFO:Importing untrained model
2025-02-20 01:22:38,850:INFO:Ridge Classifier Imported successfully
2025-02-20 01:22:38,863:INFO:Starting cross validation
2025-02-20 01:22:38,877:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:39,161:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,164:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,164:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,164:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,168:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,184:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,184:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:39,207:INFO:Calculating mean and std
2025-02-20 01:22:39,209:INFO:Creating metrics dataframe
2025-02-20 01:22:39,209:INFO:Uploading results into container
2025-02-20 01:22:39,209:INFO:Uploading model into container now
2025-02-20 01:22:39,209:INFO:_master_model_container: 6
2025-02-20 01:22:39,209:INFO:_display_container: 2
2025-02-20 01:22:39,209:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2154, solver='auto',
                tol=0.0001)
2025-02-20 01:22:39,209:INFO:create_model() successfully completed......................................
2025-02-20 01:22:39,303:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:39,303:INFO:Creating metrics dataframe
2025-02-20 01:22:39,319:INFO:Initializing Random Forest Classifier
2025-02-20 01:22:39,319:INFO:Total runtime is 0.2153676072756449 minutes
2025-02-20 01:22:39,327:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:39,327:INFO:Initializing create_model()
2025-02-20 01:22:39,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:39,327:INFO:Checking exceptions
2025-02-20 01:22:39,327:INFO:Importing libraries
2025-02-20 01:22:39,327:INFO:Copying training dataset
2025-02-20 01:22:39,338:INFO:Defining folds
2025-02-20 01:22:39,339:INFO:Declaring metric variables
2025-02-20 01:22:39,347:INFO:Importing untrained model
2025-02-20 01:22:39,355:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:22:39,371:INFO:Starting cross validation
2025-02-20 01:22:39,377:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:40,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,260:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,260:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,260:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,276:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,276:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,291:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,303:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,309:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,309:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,309:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,324:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,335:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,341:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,343:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,398:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,398:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,408:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,409:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,409:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,409:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,409:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,409:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,439:INFO:Calculating mean and std
2025-02-20 01:22:40,440:INFO:Creating metrics dataframe
2025-02-20 01:22:40,443:INFO:Uploading results into container
2025-02-20 01:22:40,443:INFO:Uploading model into container now
2025-02-20 01:22:40,444:INFO:_master_model_container: 7
2025-02-20 01:22:40,444:INFO:_display_container: 2
2025-02-20 01:22:40,445:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2154, verbose=0,
                       warm_start=False)
2025-02-20 01:22:40,445:INFO:create_model() successfully completed......................................
2025-02-20 01:22:40,550:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:40,550:INFO:Creating metrics dataframe
2025-02-20 01:22:40,559:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:22:40,559:INFO:Total runtime is 0.23603961865107215 minutes
2025-02-20 01:22:40,559:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:40,559:INFO:Initializing create_model()
2025-02-20 01:22:40,559:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:40,559:INFO:Checking exceptions
2025-02-20 01:22:40,559:INFO:Importing libraries
2025-02-20 01:22:40,559:INFO:Copying training dataset
2025-02-20 01:22:40,575:INFO:Defining folds
2025-02-20 01:22:40,575:INFO:Declaring metric variables
2025-02-20 01:22:40,575:INFO:Importing untrained model
2025-02-20 01:22:40,592:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:22:40,601:INFO:Starting cross validation
2025-02-20 01:22:40,613:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:40,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,842:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,864:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,872:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,874:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,908:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,920:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,920:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,925:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,928:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,928:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,928:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,928:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,928:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:40,942:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,945:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:40,974:INFO:Calculating mean and std
2025-02-20 01:22:40,974:INFO:Creating metrics dataframe
2025-02-20 01:22:40,974:INFO:Uploading results into container
2025-02-20 01:22:40,974:INFO:Uploading model into container now
2025-02-20 01:22:40,982:INFO:_master_model_container: 8
2025-02-20 01:22:40,982:INFO:_display_container: 2
2025-02-20 01:22:40,982:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:22:40,982:INFO:create_model() successfully completed......................................
2025-02-20 01:22:41,054:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:41,054:INFO:Creating metrics dataframe
2025-02-20 01:22:41,070:INFO:Initializing Ada Boost Classifier
2025-02-20 01:22:41,070:INFO:Total runtime is 0.24454389015833533 minutes
2025-02-20 01:22:41,070:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:41,085:INFO:Initializing create_model()
2025-02-20 01:22:41,085:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:41,085:INFO:Checking exceptions
2025-02-20 01:22:41,085:INFO:Importing libraries
2025-02-20 01:22:41,085:INFO:Copying training dataset
2025-02-20 01:22:41,085:INFO:Defining folds
2025-02-20 01:22:41,085:INFO:Declaring metric variables
2025-02-20 01:22:41,105:INFO:Importing untrained model
2025-02-20 01:22:41,120:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:22:41,139:INFO:Starting cross validation
2025-02-20 01:22:41,143:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:41,355:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,363:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,371:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,387:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,387:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,392:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,392:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,402:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:22:41,435:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,435:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,441:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,442:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,442:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,442:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,442:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,442:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,442:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,450:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,450:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,450:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,450:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,459:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,474:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,476:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,490:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:41,492:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,493:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:41,521:INFO:Calculating mean and std
2025-02-20 01:22:41,524:INFO:Creating metrics dataframe
2025-02-20 01:22:41,526:INFO:Uploading results into container
2025-02-20 01:22:41,526:INFO:Uploading model into container now
2025-02-20 01:22:41,526:INFO:_master_model_container: 9
2025-02-20 01:22:41,526:INFO:_display_container: 2
2025-02-20 01:22:41,526:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2154)
2025-02-20 01:22:41,526:INFO:create_model() successfully completed......................................
2025-02-20 01:22:41,642:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:41,642:INFO:Creating metrics dataframe
2025-02-20 01:22:41,662:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:22:41,662:INFO:Total runtime is 0.25442356665929156 minutes
2025-02-20 01:22:41,665:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:41,665:INFO:Initializing create_model()
2025-02-20 01:22:41,665:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:41,665:INFO:Checking exceptions
2025-02-20 01:22:41,665:INFO:Importing libraries
2025-02-20 01:22:41,665:INFO:Copying training dataset
2025-02-20 01:22:41,673:INFO:Defining folds
2025-02-20 01:22:41,673:INFO:Declaring metric variables
2025-02-20 01:22:41,681:INFO:Importing untrained model
2025-02-20 01:22:41,695:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:22:41,712:INFO:Starting cross validation
2025-02-20 01:22:41,712:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:42,619:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,624:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,624:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,631:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,634:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,634:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,634:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,644:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,644:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,644:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,644:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,649:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,649:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,649:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,649:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,649:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,660:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,660:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,677:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,677:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,677:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,677:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,677:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,691:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,698:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,698:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,698:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,707:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,707:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,715:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,723:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:42,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:42,739:INFO:Calculating mean and std
2025-02-20 01:22:42,741:INFO:Creating metrics dataframe
2025-02-20 01:22:42,744:INFO:Uploading results into container
2025-02-20 01:22:42,745:INFO:Uploading model into container now
2025-02-20 01:22:42,745:INFO:_master_model_container: 10
2025-02-20 01:22:42,746:INFO:_display_container: 2
2025-02-20 01:22:42,746:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=2154, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:22:42,747:INFO:create_model() successfully completed......................................
2025-02-20 01:22:42,834:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:42,834:INFO:Creating metrics dataframe
2025-02-20 01:22:42,850:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:22:42,850:INFO:Total runtime is 0.2742148915926615 minutes
2025-02-20 01:22:42,859:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:42,859:INFO:Initializing create_model()
2025-02-20 01:22:42,859:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:42,859:INFO:Checking exceptions
2025-02-20 01:22:42,862:INFO:Importing libraries
2025-02-20 01:22:42,862:INFO:Copying training dataset
2025-02-20 01:22:42,866:INFO:Defining folds
2025-02-20 01:22:42,866:INFO:Declaring metric variables
2025-02-20 01:22:42,875:INFO:Importing untrained model
2025-02-20 01:22:42,882:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:22:42,901:INFO:Starting cross validation
2025-02-20 01:22:42,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:43,140:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,140:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,140:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,171:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,171:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,178:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,178:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,179:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,181:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:43,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:43,211:INFO:Calculating mean and std
2025-02-20 01:22:43,253:INFO:Creating metrics dataframe
2025-02-20 01:22:43,258:INFO:Uploading results into container
2025-02-20 01:22:43,261:INFO:Uploading model into container now
2025-02-20 01:22:43,263:INFO:_master_model_container: 11
2025-02-20 01:22:43,263:INFO:_display_container: 2
2025-02-20 01:22:43,263:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:22:43,263:INFO:create_model() successfully completed......................................
2025-02-20 01:22:43,341:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:43,341:INFO:Creating metrics dataframe
2025-02-20 01:22:43,369:INFO:Initializing Extra Trees Classifier
2025-02-20 01:22:43,369:INFO:Total runtime is 0.28287560939788814 minutes
2025-02-20 01:22:43,369:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:43,369:INFO:Initializing create_model()
2025-02-20 01:22:43,369:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:43,385:INFO:Checking exceptions
2025-02-20 01:22:43,385:INFO:Importing libraries
2025-02-20 01:22:43,385:INFO:Copying training dataset
2025-02-20 01:22:43,394:INFO:Defining folds
2025-02-20 01:22:43,398:INFO:Declaring metric variables
2025-02-20 01:22:43,401:INFO:Importing untrained model
2025-02-20 01:22:43,411:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:22:43,425:INFO:Starting cross validation
2025-02-20 01:22:43,425:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:44,056:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,080:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,080:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,082:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,082:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,082:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,082:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,109:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,124:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,124:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,128:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,128:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,139:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,141:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,147:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,147:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,206:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,219:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,224:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,230:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,230:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:44,230:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:44,258:INFO:Calculating mean and std
2025-02-20 01:22:44,258:INFO:Creating metrics dataframe
2025-02-20 01:22:44,258:INFO:Uploading results into container
2025-02-20 01:22:44,258:INFO:Uploading model into container now
2025-02-20 01:22:44,258:INFO:_master_model_container: 12
2025-02-20 01:22:44,258:INFO:_display_container: 2
2025-02-20 01:22:44,258:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=2154, verbose=0,
                     warm_start=False)
2025-02-20 01:22:44,258:INFO:create_model() successfully completed......................................
2025-02-20 01:22:44,371:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:44,376:INFO:Creating metrics dataframe
2025-02-20 01:22:44,399:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:22:44,399:INFO:Total runtime is 0.3000375072161356 minutes
2025-02-20 01:22:44,409:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:44,410:INFO:Initializing create_model()
2025-02-20 01:22:44,410:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:44,410:INFO:Checking exceptions
2025-02-20 01:22:44,410:INFO:Importing libraries
2025-02-20 01:22:44,410:INFO:Copying training dataset
2025-02-20 01:22:44,422:INFO:Defining folds
2025-02-20 01:22:44,422:INFO:Declaring metric variables
2025-02-20 01:22:44,430:INFO:Importing untrained model
2025-02-20 01:22:44,435:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:22:44,451:INFO:Starting cross validation
2025-02-20 01:22:44,458:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:45,061:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,069:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,076:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,079:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,079:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,085:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,093:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,093:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,102:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,109:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,111:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,127:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,127:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,134:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,134:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,134:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,141:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,144:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,146:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,160:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,174:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,189:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,190:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,190:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,209:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,209:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,221:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,224:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,236:INFO:Calculating mean and std
2025-02-20 01:22:45,236:INFO:Creating metrics dataframe
2025-02-20 01:22:45,242:INFO:Uploading results into container
2025-02-20 01:22:45,242:INFO:Uploading model into container now
2025-02-20 01:22:45,242:INFO:_master_model_container: 13
2025-02-20 01:22:45,242:INFO:_display_container: 2
2025-02-20 01:22:45,242:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=2154, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:22:45,242:INFO:create_model() successfully completed......................................
2025-02-20 01:22:45,359:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:45,359:INFO:Creating metrics dataframe
2025-02-20 01:22:45,375:INFO:Initializing Dummy Classifier
2025-02-20 01:22:45,375:INFO:Total runtime is 0.3163018107414245 minutes
2025-02-20 01:22:45,391:INFO:SubProcess create_model() called ==================================
2025-02-20 01:22:45,391:INFO:Initializing create_model()
2025-02-20 01:22:45,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3FF2A5E10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:45,392:INFO:Checking exceptions
2025-02-20 01:22:45,392:INFO:Importing libraries
2025-02-20 01:22:45,392:INFO:Copying training dataset
2025-02-20 01:22:45,392:INFO:Defining folds
2025-02-20 01:22:45,392:INFO:Declaring metric variables
2025-02-20 01:22:45,407:INFO:Importing untrained model
2025-02-20 01:22:45,411:INFO:Dummy Classifier Imported successfully
2025-02-20 01:22:45,432:INFO:Starting cross validation
2025-02-20 01:22:45,436:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:22:45,659:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,674:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,674:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,680:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,680:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,687:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,693:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,707:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,707:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,707:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,713:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,713:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,713:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,713:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,713:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,713:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,719:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:45,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:45,754:INFO:Calculating mean and std
2025-02-20 01:22:45,754:INFO:Creating metrics dataframe
2025-02-20 01:22:45,758:INFO:Uploading results into container
2025-02-20 01:22:45,758:INFO:Uploading model into container now
2025-02-20 01:22:45,758:INFO:_master_model_container: 14
2025-02-20 01:22:45,758:INFO:_display_container: 2
2025-02-20 01:22:45,758:INFO:DummyClassifier(constant=None, random_state=2154, strategy='prior')
2025-02-20 01:22:45,758:INFO:create_model() successfully completed......................................
2025-02-20 01:22:45,870:INFO:SubProcess create_model() end ==================================
2025-02-20 01:22:45,872:INFO:Creating metrics dataframe
2025-02-20 01:22:45,899:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:22:45,916:INFO:Initializing create_model()
2025-02-20 01:22:45,924:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:22:45,924:INFO:Checking exceptions
2025-02-20 01:22:45,933:INFO:Importing libraries
2025-02-20 01:22:45,933:INFO:Copying training dataset
2025-02-20 01:22:45,946:INFO:Defining folds
2025-02-20 01:22:45,983:INFO:Declaring metric variables
2025-02-20 01:22:45,983:INFO:Importing untrained model
2025-02-20 01:22:45,983:INFO:Declaring custom model
2025-02-20 01:22:45,983:INFO:Logistic Regression Imported successfully
2025-02-20 01:22:45,983:INFO:Cross validation set to False
2025-02-20 01:22:45,983:INFO:Fitting Model
2025-02-20 01:22:46,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:22:46,978:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:22:46,978:INFO:create_model() successfully completed......................................
2025-02-20 01:22:47,127:INFO:_master_model_container: 14
2025-02-20 01:22:47,127:INFO:_display_container: 2
2025-02-20 01:22:47,127:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:22:47,127:INFO:compare_models() successfully completed......................................
2025-02-20 01:22:47,301:INFO:Initializing predict_model()
2025-02-20 01:22:47,301:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3FF2B6C20>)
2025-02-20 01:22:47,301:INFO:Checking exceptions
2025-02-20 01:22:47,301:INFO:Preloading libraries
2025-02-20 01:22:47,301:INFO:Set up data.
2025-02-20 01:22:47,311:INFO:Set up index.
2025-02-20 01:22:47,440:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 01:22:47,440:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:47,440:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:47,448:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:47,448:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:22:47,448:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:22:47,624:INFO:Initializing save_model()
2025-02-20 01:22:47,624:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:22:47,624:INFO:Adding model into prep_pipe
2025-02-20 01:22:47,648:INFO:LDA.pkl saved in current working directory
2025-02-20 01:22:47,663:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleIm...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2154,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:22:47,663:INFO:save_model() successfully completed......................................
2025-02-20 01:22:47,870:INFO:Initializing load_model()
2025-02-20 01:22:47,870:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:22:58,857:INFO:Initializing save_model()
2025-02-20 01:22:58,857:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2154, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:22:58,857:INFO:Adding model into prep_pipe
2025-02-20 01:22:58,882:INFO:GBC.pkl saved in current working directory
2025-02-20 01:22:58,897:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleIm...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2154,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:22:58,897:INFO:save_model() successfully completed......................................
2025-02-20 01:22:59,185:INFO:Initializing load_model()
2025-02-20 01:22:59,185:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:22:59,376:INFO:Initializing predict_model()
2025-02-20 01:22:59,379:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3E33347F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2154,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D39FBA63B0>)
2025-02-20 01:22:59,379:INFO:Checking exceptions
2025-02-20 01:22:59,379:INFO:Preloading libraries
2025-02-20 01:22:59,382:INFO:Set up data.
2025-02-20 01:22:59,382:INFO:Set up index.
2025-02-20 01:23:26,755:INFO:Initializing load_model()
2025-02-20 01:23:26,755:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:25:35,094:INFO:PyCaret ClassificationExperiment
2025-02-20 01:25:35,094:INFO:Logging name: clf-default-name
2025-02-20 01:25:35,094:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:25:35,094:INFO:version 3.3.2
2025-02-20 01:25:35,094:INFO:Initializing setup()
2025-02-20 01:25:35,094:INFO:self.USI: b9f0
2025-02-20 01:25:35,094:INFO:self._variable_keys: {'X_train', 'pipeline', 'fix_imbalance', 'logging_param', 'log_plots_param', 'data', '_ml_usecase', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'USI', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'y_train', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'exp_id', 'n_jobs_param', 'exp_name_log', '_available_plots', 'y', 'seed', 'y_test', 'is_multiclass'}
2025-02-20 01:25:35,094:INFO:Checking environment
2025-02-20 01:25:35,094:INFO:python_version: 3.10.14
2025-02-20 01:25:35,104:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:25:35,104:INFO:machine: AMD64
2025-02-20 01:25:35,105:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:25:35,115:INFO:Memory: svmem(total=16766066688, available=3534798848, percent=78.9, used=13231267840, free=3534798848)
2025-02-20 01:25:35,115:INFO:Physical Core: 12
2025-02-20 01:25:35,115:INFO:Logical Core: 14
2025-02-20 01:25:35,115:INFO:Checking libraries
2025-02-20 01:25:35,115:INFO:System:
2025-02-20 01:25:35,115:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:25:35,115:INFO:executable: c:\Users\harsh\anaconda3\envs\ids\python.exe
2025-02-20 01:25:35,115:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:25:35,115:INFO:PyCaret required dependencies:
2025-02-20 01:25:35,115:INFO:                 pip: 25.0
2025-02-20 01:25:35,115:INFO:          setuptools: 75.8.0
2025-02-20 01:25:35,115:INFO:             pycaret: 3.3.2
2025-02-20 01:25:35,115:INFO:             IPython: 8.32.0
2025-02-20 01:25:35,115:INFO:          ipywidgets: 8.1.5
2025-02-20 01:25:35,115:INFO:                tqdm: 4.67.1
2025-02-20 01:25:35,115:INFO:               numpy: 1.26.4
2025-02-20 01:25:35,115:INFO:              pandas: 2.1.4
2025-02-20 01:25:35,115:INFO:              jinja2: 3.1.5
2025-02-20 01:25:35,115:INFO:               scipy: 1.11.4
2025-02-20 01:25:35,115:INFO:              joblib: 1.3.2
2025-02-20 01:25:35,115:INFO:             sklearn: 1.4.2
2025-02-20 01:25:35,115:INFO:                pyod: 2.0.3
2025-02-20 01:25:35,115:INFO:            imblearn: 0.13.0
2025-02-20 01:25:35,115:INFO:   category_encoders: 2.7.0
2025-02-20 01:25:35,115:INFO:            lightgbm: 4.6.0
2025-02-20 01:25:35,115:INFO:               numba: 0.61.0
2025-02-20 01:25:35,115:INFO:            requests: 2.32.3
2025-02-20 01:25:35,115:INFO:          matplotlib: 3.7.5
2025-02-20 01:25:35,115:INFO:          scikitplot: 0.3.7
2025-02-20 01:25:35,115:INFO:         yellowbrick: 1.5
2025-02-20 01:25:35,115:INFO:              plotly: 5.24.1
2025-02-20 01:25:35,115:INFO:    plotly-resampler: Not installed
2025-02-20 01:25:35,115:INFO:             kaleido: 0.2.1
2025-02-20 01:25:35,115:INFO:           schemdraw: 0.15
2025-02-20 01:25:35,115:INFO:         statsmodels: 0.14.4
2025-02-20 01:25:35,115:INFO:              sktime: 0.26.0
2025-02-20 01:25:35,115:INFO:               tbats: 1.1.3
2025-02-20 01:25:35,115:INFO:            pmdarima: 2.0.4
2025-02-20 01:25:35,115:INFO:              psutil: 6.1.1
2025-02-20 01:25:35,115:INFO:          markupsafe: 3.0.2
2025-02-20 01:25:35,115:INFO:             pickle5: Not installed
2025-02-20 01:25:35,115:INFO:         cloudpickle: 3.1.1
2025-02-20 01:25:35,115:INFO:         deprecation: 2.1.0
2025-02-20 01:25:35,115:INFO:              xxhash: 3.5.0
2025-02-20 01:25:35,115:INFO:           wurlitzer: Not installed
2025-02-20 01:25:35,115:INFO:PyCaret optional dependencies:
2025-02-20 01:25:35,115:INFO:                shap: Not installed
2025-02-20 01:25:35,115:INFO:           interpret: Not installed
2025-02-20 01:25:35,115:INFO:                umap: Not installed
2025-02-20 01:25:35,115:INFO:     ydata_profiling: Not installed
2025-02-20 01:25:35,115:INFO:  explainerdashboard: Not installed
2025-02-20 01:25:35,115:INFO:             autoviz: Not installed
2025-02-20 01:25:35,115:INFO:           fairlearn: Not installed
2025-02-20 01:25:35,115:INFO:          deepchecks: Not installed
2025-02-20 01:25:35,115:INFO:             xgboost: Not installed
2025-02-20 01:25:35,115:INFO:            catboost: Not installed
2025-02-20 01:25:35,115:INFO:              kmodes: Not installed
2025-02-20 01:25:35,115:INFO:             mlxtend: Not installed
2025-02-20 01:25:35,115:INFO:       statsforecast: Not installed
2025-02-20 01:25:35,115:INFO:        tune_sklearn: Not installed
2025-02-20 01:25:35,115:INFO:                 ray: Not installed
2025-02-20 01:25:35,115:INFO:            hyperopt: Not installed
2025-02-20 01:25:35,115:INFO:              optuna: Not installed
2025-02-20 01:25:35,115:INFO:               skopt: Not installed
2025-02-20 01:25:35,115:INFO:              mlflow: Not installed
2025-02-20 01:25:35,115:INFO:              gradio: Not installed
2025-02-20 01:25:35,115:INFO:             fastapi: Not installed
2025-02-20 01:25:35,115:INFO:             uvicorn: Not installed
2025-02-20 01:25:35,115:INFO:              m2cgen: Not installed
2025-02-20 01:25:35,115:INFO:           evidently: Not installed
2025-02-20 01:25:35,115:INFO:               fugue: Not installed
2025-02-20 01:25:35,115:INFO:           streamlit: Not installed
2025-02-20 01:25:35,115:INFO:             prophet: Not installed
2025-02-20 01:25:35,115:INFO:None
2025-02-20 01:25:35,115:INFO:Set up data.
2025-02-20 01:25:35,134:INFO:Set up folding strategy.
2025-02-20 01:25:35,134:INFO:Set up train/test split.
2025-02-20 01:25:35,143:INFO:Set up index.
2025-02-20 01:25:35,150:INFO:Assigning column types.
2025-02-20 01:25:35,150:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:25:35,206:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:25:35,209:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:25:35,243:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,243:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,293:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:25:35,293:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:25:35,336:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,343:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,344:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:25:35,404:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:25:35,443:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,443:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,504:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:25:35,543:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,543:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,543:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:25:35,635:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,726:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,726:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:35,726:INFO:Preparing preprocessing pipeline...
2025-02-20 01:25:35,734:INFO:Set up label encoding.
2025-02-20 01:25:35,734:INFO:Set up simple imputation.
2025-02-20 01:25:35,734:INFO:Set up encoding of categorical features.
2025-02-20 01:25:35,734:INFO:Set up column name cleaning.
2025-02-20 01:25:35,967:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:25:35,976:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 01:25:35,976:INFO:Creating final display dataframe.
2025-02-20 01:25:36,611:INFO:Setup _display_container:                     Description             Value
0                    Session id              4203
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 10)
5        Transformed data shape        (7032, 15)
6   Transformed train set shape        (4922, 15)
7    Transformed test set shape        (2110, 15)
8              Numeric features                 7
9          Categorical features                 2
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              b9f0
2025-02-20 01:25:36,746:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:36,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:36,845:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:36,845:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:25:36,845:INFO:setup() successfully completed in 1.76s...............
2025-02-20 01:25:36,897:INFO:Initializing compare_models()
2025-02-20 01:25:36,897:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:25:36,897:INFO:Checking exceptions
2025-02-20 01:25:36,897:INFO:Preparing display monitor
2025-02-20 01:25:36,962:INFO:Initializing Logistic Regression
2025-02-20 01:25:36,962:INFO:Total runtime is 0.0 minutes
2025-02-20 01:25:36,962:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:36,962:INFO:Initializing create_model()
2025-02-20 01:25:36,962:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:36,962:INFO:Checking exceptions
2025-02-20 01:25:36,962:INFO:Importing libraries
2025-02-20 01:25:36,962:INFO:Copying training dataset
2025-02-20 01:25:36,990:INFO:Defining folds
2025-02-20 01:25:36,990:INFO:Declaring metric variables
2025-02-20 01:25:36,990:INFO:Importing untrained model
2025-02-20 01:25:37,005:INFO:Logistic Regression Imported successfully
2025-02-20 01:25:37,017:INFO:Starting cross validation
2025-02-20 01:25:37,023:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:37,811:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,820:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,876:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,883:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,891:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,909:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,917:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,917:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,927:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,927:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,927:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,943:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,959:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,961:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,973:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:37,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,977:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:37,989:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,005:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:25:38,011:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,026:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,028:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,052:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,061:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,076:INFO:Calculating mean and std
2025-02-20 01:25:38,081:INFO:Creating metrics dataframe
2025-02-20 01:25:38,085:INFO:Uploading results into container
2025-02-20 01:25:38,086:INFO:Uploading model into container now
2025-02-20 01:25:38,087:INFO:_master_model_container: 1
2025-02-20 01:25:38,087:INFO:_display_container: 2
2025-02-20 01:25:38,087:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4203, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:25:38,087:INFO:create_model() successfully completed......................................
2025-02-20 01:25:38,292:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:38,292:INFO:Creating metrics dataframe
2025-02-20 01:25:38,300:INFO:Initializing K Neighbors Classifier
2025-02-20 01:25:38,300:INFO:Total runtime is 0.022294541200002033 minutes
2025-02-20 01:25:38,308:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:38,309:INFO:Initializing create_model()
2025-02-20 01:25:38,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:38,309:INFO:Checking exceptions
2025-02-20 01:25:38,309:INFO:Importing libraries
2025-02-20 01:25:38,309:INFO:Copying training dataset
2025-02-20 01:25:38,328:INFO:Defining folds
2025-02-20 01:25:38,328:INFO:Declaring metric variables
2025-02-20 01:25:38,333:INFO:Importing untrained model
2025-02-20 01:25:38,343:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:25:38,365:INFO:Starting cross validation
2025-02-20 01:25:38,368:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:38,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,776:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,776:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,776:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,776:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,793:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,793:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,793:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,793:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,816:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,826:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:38,842:INFO:Calculating mean and std
2025-02-20 01:25:38,843:INFO:Creating metrics dataframe
2025-02-20 01:25:38,846:INFO:Uploading results into container
2025-02-20 01:25:38,846:INFO:Uploading model into container now
2025-02-20 01:25:38,846:INFO:_master_model_container: 2
2025-02-20 01:25:38,850:INFO:_display_container: 2
2025-02-20 01:25:38,850:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:25:38,851:INFO:create_model() successfully completed......................................
2025-02-20 01:25:38,980:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:38,980:INFO:Creating metrics dataframe
2025-02-20 01:25:38,993:INFO:Initializing Naive Bayes
2025-02-20 01:25:38,997:INFO:Total runtime is 0.03390339612960815 minutes
2025-02-20 01:25:39,000:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:39,000:INFO:Initializing create_model()
2025-02-20 01:25:39,000:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:39,003:INFO:Checking exceptions
2025-02-20 01:25:39,003:INFO:Importing libraries
2025-02-20 01:25:39,003:INFO:Copying training dataset
2025-02-20 01:25:39,011:INFO:Defining folds
2025-02-20 01:25:39,014:INFO:Declaring metric variables
2025-02-20 01:25:39,020:INFO:Importing untrained model
2025-02-20 01:25:39,026:INFO:Naive Bayes Imported successfully
2025-02-20 01:25:39,040:INFO:Starting cross validation
2025-02-20 01:25:39,042:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:39,238:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,254:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,255:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,261:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,261:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,261:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,269:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,269:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,269:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,272:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,277:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,277:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,277:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,285:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,285:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,296:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,301:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,301:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,301:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,301:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,309:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,309:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,315:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,320:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,344:INFO:Calculating mean and std
2025-02-20 01:25:39,346:INFO:Creating metrics dataframe
2025-02-20 01:25:39,348:INFO:Uploading results into container
2025-02-20 01:25:39,348:INFO:Uploading model into container now
2025-02-20 01:25:39,348:INFO:_master_model_container: 3
2025-02-20 01:25:39,348:INFO:_display_container: 2
2025-02-20 01:25:39,348:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:25:39,350:INFO:create_model() successfully completed......................................
2025-02-20 01:25:39,467:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:39,467:INFO:Creating metrics dataframe
2025-02-20 01:25:39,484:INFO:Initializing Decision Tree Classifier
2025-02-20 01:25:39,484:INFO:Total runtime is 0.04202575286229451 minutes
2025-02-20 01:25:39,484:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:39,484:INFO:Initializing create_model()
2025-02-20 01:25:39,484:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:39,484:INFO:Checking exceptions
2025-02-20 01:25:39,493:INFO:Importing libraries
2025-02-20 01:25:39,493:INFO:Copying training dataset
2025-02-20 01:25:39,502:INFO:Defining folds
2025-02-20 01:25:39,502:INFO:Declaring metric variables
2025-02-20 01:25:39,509:INFO:Importing untrained model
2025-02-20 01:25:39,524:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:25:39,542:INFO:Starting cross validation
2025-02-20 01:25:39,542:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:39,760:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,760:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,779:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,780:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,780:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,783:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,793:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,793:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,797:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,809:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,810:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,826:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,826:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:39,857:INFO:Calculating mean and std
2025-02-20 01:25:39,857:INFO:Creating metrics dataframe
2025-02-20 01:25:39,857:INFO:Uploading results into container
2025-02-20 01:25:39,857:INFO:Uploading model into container now
2025-02-20 01:25:39,857:INFO:_master_model_container: 4
2025-02-20 01:25:39,857:INFO:_display_container: 2
2025-02-20 01:25:39,857:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=4203, splitter='best')
2025-02-20 01:25:39,857:INFO:create_model() successfully completed......................................
2025-02-20 01:25:39,971:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:39,971:INFO:Creating metrics dataframe
2025-02-20 01:25:39,994:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:25:40,002:INFO:Total runtime is 0.050666900475819905 minutes
2025-02-20 01:25:40,002:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:40,002:INFO:Initializing create_model()
2025-02-20 01:25:40,002:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:40,002:INFO:Checking exceptions
2025-02-20 01:25:40,010:INFO:Importing libraries
2025-02-20 01:25:40,010:INFO:Copying training dataset
2025-02-20 01:25:40,018:INFO:Defining folds
2025-02-20 01:25:40,018:INFO:Declaring metric variables
2025-02-20 01:25:40,047:INFO:Importing untrained model
2025-02-20 01:25:40,052:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:25:40,063:INFO:Starting cross validation
2025-02-20 01:25:40,063:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,307:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,307:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,307:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,307:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,309:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,323:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,370:INFO:Calculating mean and std
2025-02-20 01:25:40,370:INFO:Creating metrics dataframe
2025-02-20 01:25:40,370:INFO:Uploading results into container
2025-02-20 01:25:40,370:INFO:Uploading model into container now
2025-02-20 01:25:40,370:INFO:_master_model_container: 5
2025-02-20 01:25:40,370:INFO:_display_container: 2
2025-02-20 01:25:40,370:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=4203, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:25:40,370:INFO:create_model() successfully completed......................................
2025-02-20 01:25:40,473:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:40,473:INFO:Creating metrics dataframe
2025-02-20 01:25:40,499:INFO:Initializing Ridge Classifier
2025-02-20 01:25:40,499:INFO:Total runtime is 0.058948461214701334 minutes
2025-02-20 01:25:40,499:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:40,512:INFO:Initializing create_model()
2025-02-20 01:25:40,512:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:40,512:INFO:Checking exceptions
2025-02-20 01:25:40,512:INFO:Importing libraries
2025-02-20 01:25:40,512:INFO:Copying training dataset
2025-02-20 01:25:40,528:INFO:Defining folds
2025-02-20 01:25:40,530:INFO:Declaring metric variables
2025-02-20 01:25:40,533:INFO:Importing untrained model
2025-02-20 01:25:40,543:INFO:Ridge Classifier Imported successfully
2025-02-20 01:25:40,556:INFO:Starting cross validation
2025-02-20 01:25:40,559:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:40,745:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,748:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,774:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,790:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,790:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,790:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,790:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,790:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,806:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,806:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,806:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:40,837:INFO:Calculating mean and std
2025-02-20 01:25:40,837:INFO:Creating metrics dataframe
2025-02-20 01:25:40,837:INFO:Uploading results into container
2025-02-20 01:25:40,843:INFO:Uploading model into container now
2025-02-20 01:25:40,843:INFO:_master_model_container: 6
2025-02-20 01:25:40,843:INFO:_display_container: 2
2025-02-20 01:25:40,843:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=4203, solver='auto',
                tol=0.0001)
2025-02-20 01:25:40,843:INFO:create_model() successfully completed......................................
2025-02-20 01:25:40,985:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:40,985:INFO:Creating metrics dataframe
2025-02-20 01:25:41,011:INFO:Initializing Random Forest Classifier
2025-02-20 01:25:41,011:INFO:Total runtime is 0.06747525930404663 minutes
2025-02-20 01:25:41,026:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:41,026:INFO:Initializing create_model()
2025-02-20 01:25:41,026:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:41,026:INFO:Checking exceptions
2025-02-20 01:25:41,026:INFO:Importing libraries
2025-02-20 01:25:41,026:INFO:Copying training dataset
2025-02-20 01:25:41,040:INFO:Defining folds
2025-02-20 01:25:41,040:INFO:Declaring metric variables
2025-02-20 01:25:41,043:INFO:Importing untrained model
2025-02-20 01:25:41,066:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:25:41,080:INFO:Starting cross validation
2025-02-20 01:25:41,085:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:42,683:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,683:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,683:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,702:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,702:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,702:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,708:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,719:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,743:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,743:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,743:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,759:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,765:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,765:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,777:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,778:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,826:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,826:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,834:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,834:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,844:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,844:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:42,859:INFO:Calculating mean and std
2025-02-20 01:25:42,860:INFO:Creating metrics dataframe
2025-02-20 01:25:42,860:INFO:Uploading results into container
2025-02-20 01:25:42,860:INFO:Uploading model into container now
2025-02-20 01:25:42,860:INFO:_master_model_container: 7
2025-02-20 01:25:42,860:INFO:_display_container: 2
2025-02-20 01:25:42,860:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4203, verbose=0,
                       warm_start=False)
2025-02-20 01:25:42,860:INFO:create_model() successfully completed......................................
2025-02-20 01:25:42,976:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:42,976:INFO:Creating metrics dataframe
2025-02-20 01:25:42,996:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:25:42,996:INFO:Total runtime is 0.10055940548578898 minutes
2025-02-20 01:25:42,996:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:42,996:INFO:Initializing create_model()
2025-02-20 01:25:43,004:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:43,004:INFO:Checking exceptions
2025-02-20 01:25:43,004:INFO:Importing libraries
2025-02-20 01:25:43,004:INFO:Copying training dataset
2025-02-20 01:25:43,011:INFO:Defining folds
2025-02-20 01:25:43,011:INFO:Declaring metric variables
2025-02-20 01:25:43,020:INFO:Importing untrained model
2025-02-20 01:25:43,028:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:25:43,043:INFO:Starting cross validation
2025-02-20 01:25:43,045:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:43,183:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,227:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,242:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,258:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,258:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,258:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,258:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,258:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,273:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:25:43,283:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,283:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,283:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,283:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,283:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,298:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,324:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,335:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:43,359:INFO:Calculating mean and std
2025-02-20 01:25:43,362:INFO:Creating metrics dataframe
2025-02-20 01:25:43,364:INFO:Uploading results into container
2025-02-20 01:25:43,364:INFO:Uploading model into container now
2025-02-20 01:25:43,364:INFO:_master_model_container: 8
2025-02-20 01:25:43,364:INFO:_display_container: 2
2025-02-20 01:25:43,367:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:25:43,367:INFO:create_model() successfully completed......................................
2025-02-20 01:25:43,478:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:43,478:INFO:Creating metrics dataframe
2025-02-20 01:25:43,492:INFO:Initializing Ada Boost Classifier
2025-02-20 01:25:43,492:INFO:Total runtime is 0.10883532365163168 minutes
2025-02-20 01:25:43,500:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:43,500:INFO:Initializing create_model()
2025-02-20 01:25:43,500:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:43,500:INFO:Checking exceptions
2025-02-20 01:25:43,503:INFO:Importing libraries
2025-02-20 01:25:43,504:INFO:Copying training dataset
2025-02-20 01:25:43,516:INFO:Defining folds
2025-02-20 01:25:43,516:INFO:Declaring metric variables
2025-02-20 01:25:43,519:INFO:Importing untrained model
2025-02-20 01:25:43,531:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:25:43,542:INFO:Starting cross validation
2025-02-20 01:25:43,542:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:43,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,694:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,709:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,712:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,720:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,720:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,720:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,720:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:43,728:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:25:44,209:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,209:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,224:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,233:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,241:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,256:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,272:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,272:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:44,288:INFO:Calculating mean and std
2025-02-20 01:25:44,288:INFO:Creating metrics dataframe
2025-02-20 01:25:44,288:INFO:Uploading results into container
2025-02-20 01:25:44,288:INFO:Uploading model into container now
2025-02-20 01:25:44,288:INFO:_master_model_container: 9
2025-02-20 01:25:44,288:INFO:_display_container: 2
2025-02-20 01:25:44,288:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=4203)
2025-02-20 01:25:44,295:INFO:create_model() successfully completed......................................
2025-02-20 01:25:44,404:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:44,404:INFO:Creating metrics dataframe
2025-02-20 01:25:44,426:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:25:44,426:INFO:Total runtime is 0.12440147002538046 minutes
2025-02-20 01:25:44,435:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:44,435:INFO:Initializing create_model()
2025-02-20 01:25:44,435:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:44,435:INFO:Checking exceptions
2025-02-20 01:25:44,435:INFO:Importing libraries
2025-02-20 01:25:44,435:INFO:Copying training dataset
2025-02-20 01:25:44,448:INFO:Defining folds
2025-02-20 01:25:44,448:INFO:Declaring metric variables
2025-02-20 01:25:44,448:INFO:Importing untrained model
2025-02-20 01:25:44,464:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:25:44,482:INFO:Starting cross validation
2025-02-20 01:25:44,489:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:46,136:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,145:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,149:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,176:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,192:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,195:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,208:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,224:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,224:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,224:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,239:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,248:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,263:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,263:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,263:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,263:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,310:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,310:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,342:INFO:Calculating mean and std
2025-02-20 01:25:46,342:INFO:Creating metrics dataframe
2025-02-20 01:25:46,342:INFO:Uploading results into container
2025-02-20 01:25:46,342:INFO:Uploading model into container now
2025-02-20 01:25:46,342:INFO:_master_model_container: 10
2025-02-20 01:25:46,342:INFO:_display_container: 2
2025-02-20 01:25:46,352:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=4203, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:25:46,353:INFO:create_model() successfully completed......................................
2025-02-20 01:25:46,479:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:46,479:INFO:Creating metrics dataframe
2025-02-20 01:25:46,494:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:25:46,494:INFO:Total runtime is 0.15886737108230592 minutes
2025-02-20 01:25:46,494:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:46,494:INFO:Initializing create_model()
2025-02-20 01:25:46,494:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:46,494:INFO:Checking exceptions
2025-02-20 01:25:46,494:INFO:Importing libraries
2025-02-20 01:25:46,494:INFO:Copying training dataset
2025-02-20 01:25:46,510:INFO:Defining folds
2025-02-20 01:25:46,510:INFO:Declaring metric variables
2025-02-20 01:25:46,529:INFO:Importing untrained model
2025-02-20 01:25:46,538:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:25:46,552:INFO:Starting cross validation
2025-02-20 01:25:46,561:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:46,734:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,750:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,766:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,766:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,766:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,766:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,766:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,776:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,779:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,782:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,792:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,811:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,813:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:46,824:INFO:Calculating mean and std
2025-02-20 01:25:46,824:INFO:Creating metrics dataframe
2025-02-20 01:25:46,826:INFO:Uploading results into container
2025-02-20 01:25:46,826:INFO:Uploading model into container now
2025-02-20 01:25:46,826:INFO:_master_model_container: 11
2025-02-20 01:25:46,826:INFO:_display_container: 2
2025-02-20 01:25:46,826:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:25:46,826:INFO:create_model() successfully completed......................................
2025-02-20 01:25:46,953:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:46,953:INFO:Creating metrics dataframe
2025-02-20 01:25:46,976:INFO:Initializing Extra Trees Classifier
2025-02-20 01:25:46,976:INFO:Total runtime is 0.16689557631810506 minutes
2025-02-20 01:25:46,976:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:46,976:INFO:Initializing create_model()
2025-02-20 01:25:46,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:46,976:INFO:Checking exceptions
2025-02-20 01:25:46,976:INFO:Importing libraries
2025-02-20 01:25:46,992:INFO:Copying training dataset
2025-02-20 01:25:46,999:INFO:Defining folds
2025-02-20 01:25:46,999:INFO:Declaring metric variables
2025-02-20 01:25:47,010:INFO:Importing untrained model
2025-02-20 01:25:47,023:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:25:47,042:INFO:Starting cross validation
2025-02-20 01:25:47,042:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:47,926:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,931:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,931:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,941:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,941:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,941:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,988:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,988:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,988:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:47,988:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,009:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,009:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,009:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,009:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,012:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,012:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,016:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,016:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,016:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,016:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,016:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,016:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,028:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,028:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,113:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,113:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,125:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,133:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,133:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:48,156:INFO:Calculating mean and std
2025-02-20 01:25:48,156:INFO:Creating metrics dataframe
2025-02-20 01:25:48,156:INFO:Uploading results into container
2025-02-20 01:25:48,156:INFO:Uploading model into container now
2025-02-20 01:25:48,156:INFO:_master_model_container: 12
2025-02-20 01:25:48,156:INFO:_display_container: 2
2025-02-20 01:25:48,156:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=4203, verbose=0,
                     warm_start=False)
2025-02-20 01:25:48,156:INFO:create_model() successfully completed......................................
2025-02-20 01:25:48,360:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:48,360:INFO:Creating metrics dataframe
2025-02-20 01:25:48,375:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:25:48,375:INFO:Total runtime is 0.19020891586939492 minutes
2025-02-20 01:25:48,375:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:48,391:INFO:Initializing create_model()
2025-02-20 01:25:48,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:48,391:INFO:Checking exceptions
2025-02-20 01:25:48,391:INFO:Importing libraries
2025-02-20 01:25:48,391:INFO:Copying training dataset
2025-02-20 01:25:48,392:INFO:Defining folds
2025-02-20 01:25:48,392:INFO:Declaring metric variables
2025-02-20 01:25:48,407:INFO:Importing untrained model
2025-02-20 01:25:48,412:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:25:48,431:INFO:Starting cross validation
2025-02-20 01:25:48,431:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:50,029:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,029:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,042:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,045:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,049:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,054:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,054:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,059:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,062:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,064:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,067:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,072:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,075:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,151:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,154:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,165:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,194:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,194:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,194:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,209:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,209:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,211:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,261:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,272:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,277:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,304:INFO:Calculating mean and std
2025-02-20 01:25:50,306:INFO:Creating metrics dataframe
2025-02-20 01:25:50,310:INFO:Uploading results into container
2025-02-20 01:25:50,313:INFO:Uploading model into container now
2025-02-20 01:25:50,313:INFO:_master_model_container: 13
2025-02-20 01:25:50,314:INFO:_display_container: 2
2025-02-20 01:25:50,315:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=4203, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:25:50,315:INFO:create_model() successfully completed......................................
2025-02-20 01:25:50,456:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:50,456:INFO:Creating metrics dataframe
2025-02-20 01:25:50,456:INFO:Initializing Dummy Classifier
2025-02-20 01:25:50,472:INFO:Total runtime is 0.22515755097071327 minutes
2025-02-20 01:25:50,472:INFO:SubProcess create_model() called ==================================
2025-02-20 01:25:50,472:INFO:Initializing create_model()
2025-02-20 01:25:50,472:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A3DE6B60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:50,472:INFO:Checking exceptions
2025-02-20 01:25:50,472:INFO:Importing libraries
2025-02-20 01:25:50,472:INFO:Copying training dataset
2025-02-20 01:25:50,491:INFO:Defining folds
2025-02-20 01:25:50,491:INFO:Declaring metric variables
2025-02-20 01:25:50,504:INFO:Importing untrained model
2025-02-20 01:25:50,516:INFO:Dummy Classifier Imported successfully
2025-02-20 01:25:50,525:INFO:Starting cross validation
2025-02-20 01:25:50,533:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:25:50,702:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,702:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,702:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,717:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,733:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,742:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,758:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,773:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:50,773:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:50,789:INFO:Calculating mean and std
2025-02-20 01:25:50,789:INFO:Creating metrics dataframe
2025-02-20 01:25:50,789:INFO:Uploading results into container
2025-02-20 01:25:50,789:INFO:Uploading model into container now
2025-02-20 01:25:50,789:INFO:_master_model_container: 14
2025-02-20 01:25:50,789:INFO:_display_container: 2
2025-02-20 01:25:50,789:INFO:DummyClassifier(constant=None, random_state=4203, strategy='prior')
2025-02-20 01:25:50,789:INFO:create_model() successfully completed......................................
2025-02-20 01:25:50,920:INFO:SubProcess create_model() end ==================================
2025-02-20 01:25:50,920:INFO:Creating metrics dataframe
2025-02-20 01:25:50,948:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:25:50,962:INFO:Initializing create_model()
2025-02-20 01:25:50,962:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:25:50,962:INFO:Checking exceptions
2025-02-20 01:25:50,962:INFO:Importing libraries
2025-02-20 01:25:50,962:INFO:Copying training dataset
2025-02-20 01:25:50,992:INFO:Defining folds
2025-02-20 01:25:50,992:INFO:Declaring metric variables
2025-02-20 01:25:50,995:INFO:Importing untrained model
2025-02-20 01:25:50,995:INFO:Declaring custom model
2025-02-20 01:25:50,997:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:25:51,002:INFO:Cross validation set to False
2025-02-20 01:25:51,002:INFO:Fitting Model
2025-02-20 01:25:51,089:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:25:51,089:INFO:create_model() successfully completed......................................
2025-02-20 01:25:51,344:INFO:_master_model_container: 14
2025-02-20 01:25:51,383:INFO:_display_container: 2
2025-02-20 01:25:51,383:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:25:51,383:INFO:compare_models() successfully completed......................................
2025-02-20 01:25:51,564:INFO:Initializing predict_model()
2025-02-20 01:25:51,573:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A3EDC550>)
2025-02-20 01:25:51,573:INFO:Checking exceptions
2025-02-20 01:25:51,573:INFO:Preloading libraries
2025-02-20 01:25:51,577:INFO:Set up data.
2025-02-20 01:25:51,581:INFO:Set up index.
2025-02-20 01:25:51,678:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 01:25:51,678:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:51,678:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:51,689:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:51,692:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:25:51,692:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:25:51,891:INFO:Initializing save_model()
2025-02-20 01:25:51,899:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:25:51,899:INFO:Adding model into prep_pipe
2025-02-20 01:25:51,909:INFO:GBC.pkl saved in current working directory
2025-02-20 01:25:51,926:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleIm...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-02-20 01:25:51,926:INFO:save_model() successfully completed......................................
2025-02-20 01:25:52,154:INFO:Initializing load_model()
2025-02-20 01:25:52,154:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:25:52,306:INFO:Initializing predict_model()
2025-02-20 01:25:52,306:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A417BAC0>)
2025-02-20 01:25:52,306:INFO:Checking exceptions
2025-02-20 01:25:52,306:INFO:Preloading libraries
2025-02-20 01:25:52,306:INFO:Set up data.
2025-02-20 01:25:52,306:INFO:Set up index.
2025-02-20 01:25:52,664:INFO:Initializing load_model()
2025-02-20 01:25:52,664:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:27:33,408:INFO:Initializing predict_model()
2025-02-20 01:27:33,409:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A0D83E20>)
2025-02-20 01:27:33,409:INFO:Checking exceptions
2025-02-20 01:27:33,410:INFO:Preloading libraries
2025-02-20 01:27:33,415:INFO:Set up data.
2025-02-20 01:27:33,420:INFO:Set up index.
2025-02-20 01:28:56,002:INFO:Initializing predict_model()
2025-02-20 01:28:56,010:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A3DE63B0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A3DE3880>)
2025-02-20 01:28:56,010:INFO:Checking exceptions
2025-02-20 01:28:56,010:INFO:Preloading libraries
2025-02-20 01:28:56,021:INFO:Set up data.
2025-02-20 01:28:56,029:INFO:Set up index.
2025-02-20 12:02:19,821:INFO:PyCaret ClassificationExperiment
2025-02-20 12:02:19,821:INFO:Logging name: clf-default-name
2025-02-20 12:02:19,821:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 12:02:19,821:INFO:version 3.3.2
2025-02-20 12:02:19,831:INFO:Initializing setup()
2025-02-20 12:02:19,831:INFO:self.USI: 1406
2025-02-20 12:02:19,831:INFO:self._variable_keys: {'X_train', 'pipeline', 'fix_imbalance', 'logging_param', 'log_plots_param', 'data', '_ml_usecase', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'USI', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'y_train', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'exp_id', 'n_jobs_param', 'exp_name_log', '_available_plots', 'y', 'seed', 'y_test', 'is_multiclass'}
2025-02-20 12:02:19,831:INFO:Checking environment
2025-02-20 12:02:19,831:INFO:python_version: 3.10.14
2025-02-20 12:02:19,831:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 12:02:19,831:INFO:machine: AMD64
2025-02-20 12:02:19,831:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 12:02:19,855:INFO:Memory: svmem(total=16766066688, available=5834448896, percent=65.2, used=10931617792, free=5834448896)
2025-02-20 12:02:19,855:INFO:Physical Core: 12
2025-02-20 12:02:19,855:INFO:Logical Core: 14
2025-02-20 12:02:19,855:INFO:Checking libraries
2025-02-20 12:02:19,855:INFO:System:
2025-02-20 12:02:19,855:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 12:02:19,855:INFO:executable: c:\Users\harsh\anaconda3\envs\ids\python.exe
2025-02-20 12:02:19,855:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 12:02:19,855:INFO:PyCaret required dependencies:
2025-02-20 12:02:19,855:INFO:                 pip: 25.0
2025-02-20 12:02:19,855:INFO:          setuptools: 75.8.0
2025-02-20 12:02:19,855:INFO:             pycaret: 3.3.2
2025-02-20 12:02:19,855:INFO:             IPython: 8.32.0
2025-02-20 12:02:19,855:INFO:          ipywidgets: 8.1.5
2025-02-20 12:02:19,855:INFO:                tqdm: 4.67.1
2025-02-20 12:02:19,855:INFO:               numpy: 1.26.4
2025-02-20 12:02:19,855:INFO:              pandas: 2.1.4
2025-02-20 12:02:19,855:INFO:              jinja2: 3.1.5
2025-02-20 12:02:19,855:INFO:               scipy: 1.11.4
2025-02-20 12:02:19,855:INFO:              joblib: 1.3.2
2025-02-20 12:02:19,855:INFO:             sklearn: 1.4.2
2025-02-20 12:02:19,855:INFO:                pyod: 2.0.3
2025-02-20 12:02:19,855:INFO:            imblearn: 0.13.0
2025-02-20 12:02:19,855:INFO:   category_encoders: 2.7.0
2025-02-20 12:02:19,855:INFO:            lightgbm: 4.6.0
2025-02-20 12:02:19,855:INFO:               numba: 0.61.0
2025-02-20 12:02:19,855:INFO:            requests: 2.32.3
2025-02-20 12:02:19,855:INFO:          matplotlib: 3.7.5
2025-02-20 12:02:19,855:INFO:          scikitplot: 0.3.7
2025-02-20 12:02:19,855:INFO:         yellowbrick: 1.5
2025-02-20 12:02:19,855:INFO:              plotly: 5.24.1
2025-02-20 12:02:19,855:INFO:    plotly-resampler: Not installed
2025-02-20 12:02:19,855:INFO:             kaleido: 0.2.1
2025-02-20 12:02:19,855:INFO:           schemdraw: 0.15
2025-02-20 12:02:19,855:INFO:         statsmodels: 0.14.4
2025-02-20 12:02:19,855:INFO:              sktime: 0.26.0
2025-02-20 12:02:19,855:INFO:               tbats: 1.1.3
2025-02-20 12:02:19,855:INFO:            pmdarima: 2.0.4
2025-02-20 12:02:19,855:INFO:              psutil: 6.1.1
2025-02-20 12:02:19,855:INFO:          markupsafe: 3.0.2
2025-02-20 12:02:19,855:INFO:             pickle5: Not installed
2025-02-20 12:02:19,855:INFO:         cloudpickle: 3.1.1
2025-02-20 12:02:19,855:INFO:         deprecation: 2.1.0
2025-02-20 12:02:19,855:INFO:              xxhash: 3.5.0
2025-02-20 12:02:19,855:INFO:           wurlitzer: Not installed
2025-02-20 12:02:19,855:INFO:PyCaret optional dependencies:
2025-02-20 12:02:19,855:INFO:                shap: Not installed
2025-02-20 12:02:19,855:INFO:           interpret: Not installed
2025-02-20 12:02:19,855:INFO:                umap: Not installed
2025-02-20 12:02:19,855:INFO:     ydata_profiling: Not installed
2025-02-20 12:02:19,855:INFO:  explainerdashboard: Not installed
2025-02-20 12:02:19,855:INFO:             autoviz: Not installed
2025-02-20 12:02:19,855:INFO:           fairlearn: Not installed
2025-02-20 12:02:19,855:INFO:          deepchecks: Not installed
2025-02-20 12:02:19,855:INFO:             xgboost: Not installed
2025-02-20 12:02:19,855:INFO:            catboost: Not installed
2025-02-20 12:02:19,855:INFO:              kmodes: Not installed
2025-02-20 12:02:19,855:INFO:             mlxtend: Not installed
2025-02-20 12:02:19,855:INFO:       statsforecast: Not installed
2025-02-20 12:02:19,855:INFO:        tune_sklearn: Not installed
2025-02-20 12:02:19,855:INFO:                 ray: Not installed
2025-02-20 12:02:19,855:INFO:            hyperopt: Not installed
2025-02-20 12:02:19,855:INFO:              optuna: Not installed
2025-02-20 12:02:19,855:INFO:               skopt: Not installed
2025-02-20 12:02:19,855:INFO:              mlflow: Not installed
2025-02-20 12:02:19,855:INFO:              gradio: Not installed
2025-02-20 12:02:19,855:INFO:             fastapi: Not installed
2025-02-20 12:02:19,855:INFO:             uvicorn: Not installed
2025-02-20 12:02:19,855:INFO:              m2cgen: Not installed
2025-02-20 12:02:19,855:INFO:           evidently: Not installed
2025-02-20 12:02:19,855:INFO:               fugue: Not installed
2025-02-20 12:02:19,855:INFO:           streamlit: Not installed
2025-02-20 12:02:19,855:INFO:             prophet: Not installed
2025-02-20 12:02:19,855:INFO:None
2025-02-20 12:02:19,855:INFO:Set up data.
2025-02-20 12:02:19,871:INFO:Set up folding strategy.
2025-02-20 12:02:19,871:INFO:Set up train/test split.
2025-02-20 12:02:19,881:INFO:Set up index.
2025-02-20 12:02:19,881:INFO:Assigning column types.
2025-02-20 12:02:19,889:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 12:02:19,949:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 12:02:19,949:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:02:19,993:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:19,999:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,052:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 12:02:20,052:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:02:20,095:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,095:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,095:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 12:02:20,154:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:02:20,184:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,184:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,244:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:02:20,292:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,292:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,292:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 12:02:20,390:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,485:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,485:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:20,485:INFO:Preparing preprocessing pipeline...
2025-02-20 12:02:20,485:INFO:Set up label encoding.
2025-02-20 12:02:20,485:INFO:Set up simple imputation.
2025-02-20 12:02:20,485:INFO:Set up encoding of categorical features.
2025-02-20 12:02:20,485:INFO:Set up column name cleaning.
2025-02-20 12:02:20,725:INFO:Finished creating preprocessing pipeline.
2025-02-20 12:02:20,732:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 12:02:20,732:INFO:Creating final display dataframe.
2025-02-20 12:02:21,332:INFO:Setup _display_container:                     Description             Value
0                    Session id              2007
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 10)
5        Transformed data shape        (7032, 15)
6   Transformed train set shape        (4922, 15)
7    Transformed test set shape        (2110, 15)
8              Numeric features                 7
9          Categorical features                 2
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              1406
2025-02-20 12:02:21,440:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:21,440:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:21,532:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:21,532:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:02:21,532:INFO:setup() successfully completed in 1.72s...............
2025-02-20 12:02:21,566:INFO:Initializing compare_models()
2025-02-20 12:02:21,566:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 12:02:21,566:INFO:Checking exceptions
2025-02-20 12:02:21,566:INFO:Preparing display monitor
2025-02-20 12:02:21,623:INFO:Initializing Logistic Regression
2025-02-20 12:02:21,623:INFO:Total runtime is 0.0 minutes
2025-02-20 12:02:21,631:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:21,631:INFO:Initializing create_model()
2025-02-20 12:02:21,631:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:21,631:INFO:Checking exceptions
2025-02-20 12:02:21,631:INFO:Importing libraries
2025-02-20 12:02:21,631:INFO:Copying training dataset
2025-02-20 12:02:21,639:INFO:Defining folds
2025-02-20 12:02:21,639:INFO:Declaring metric variables
2025-02-20 12:02:21,647:INFO:Importing untrained model
2025-02-20 12:02:21,655:INFO:Logistic Regression Imported successfully
2025-02-20 12:02:21,663:INFO:Starting cross validation
2025-02-20 12:02:21,670:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:29,367:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,382:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,382:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,382:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,382:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,398:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,398:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:29,435:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,437:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,437:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,437:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,437:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,453:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,469:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,469:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:29,484:INFO:Calculating mean and std
2025-02-20 12:02:29,484:INFO:Creating metrics dataframe
2025-02-20 12:02:29,492:INFO:Uploading results into container
2025-02-20 12:02:29,492:INFO:Uploading model into container now
2025-02-20 12:02:29,492:INFO:_master_model_container: 1
2025-02-20 12:02:29,492:INFO:_display_container: 2
2025-02-20 12:02:29,492:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2007, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:02:29,492:INFO:create_model() successfully completed......................................
2025-02-20 12:02:29,715:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:29,715:INFO:Creating metrics dataframe
2025-02-20 12:02:29,725:INFO:Initializing K Neighbors Classifier
2025-02-20 12:02:29,725:INFO:Total runtime is 0.13503299951553344 minutes
2025-02-20 12:02:29,733:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:29,733:INFO:Initializing create_model()
2025-02-20 12:02:29,733:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:29,733:INFO:Checking exceptions
2025-02-20 12:02:29,733:INFO:Importing libraries
2025-02-20 12:02:29,733:INFO:Copying training dataset
2025-02-20 12:02:29,741:INFO:Defining folds
2025-02-20 12:02:29,741:INFO:Declaring metric variables
2025-02-20 12:02:29,751:INFO:Importing untrained model
2025-02-20 12:02:29,751:INFO:K Neighbors Classifier Imported successfully
2025-02-20 12:02:29,768:INFO:Starting cross validation
2025-02-20 12:02:29,768:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:30,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,290:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,290:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,293:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,299:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,299:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,299:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,305:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,305:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,305:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,305:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,305:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,314:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,318:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,322:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,335:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,344:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:30,350:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,866:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,866:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,882:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,882:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,882:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,882:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,897:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,917:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,920:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,930:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:33,976:INFO:Calculating mean and std
2025-02-20 12:02:33,978:INFO:Creating metrics dataframe
2025-02-20 12:02:34,021:INFO:Uploading results into container
2025-02-20 12:02:34,021:INFO:Uploading model into container now
2025-02-20 12:02:34,021:INFO:_master_model_container: 2
2025-02-20 12:02:34,021:INFO:_display_container: 2
2025-02-20 12:02:34,021:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 12:02:34,021:INFO:create_model() successfully completed......................................
2025-02-20 12:02:34,212:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:34,212:INFO:Creating metrics dataframe
2025-02-20 12:02:34,241:INFO:Initializing Naive Bayes
2025-02-20 12:02:34,241:INFO:Total runtime is 0.2103033979733785 minutes
2025-02-20 12:02:34,248:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:34,248:INFO:Initializing create_model()
2025-02-20 12:02:34,248:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:34,248:INFO:Checking exceptions
2025-02-20 12:02:34,248:INFO:Importing libraries
2025-02-20 12:02:34,248:INFO:Copying training dataset
2025-02-20 12:02:34,262:INFO:Defining folds
2025-02-20 12:02:34,262:INFO:Declaring metric variables
2025-02-20 12:02:34,268:INFO:Importing untrained model
2025-02-20 12:02:34,276:INFO:Naive Bayes Imported successfully
2025-02-20 12:02:34,289:INFO:Starting cross validation
2025-02-20 12:02:34,289:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:34,480:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,480:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,495:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,526:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,542:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:34,566:INFO:Calculating mean and std
2025-02-20 12:02:34,566:INFO:Creating metrics dataframe
2025-02-20 12:02:34,566:INFO:Uploading results into container
2025-02-20 12:02:34,566:INFO:Uploading model into container now
2025-02-20 12:02:34,566:INFO:_master_model_container: 3
2025-02-20 12:02:34,566:INFO:_display_container: 2
2025-02-20 12:02:34,566:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 12:02:34,566:INFO:create_model() successfully completed......................................
2025-02-20 12:02:34,758:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:34,758:INFO:Creating metrics dataframe
2025-02-20 12:02:34,768:INFO:Initializing Decision Tree Classifier
2025-02-20 12:02:34,768:INFO:Total runtime is 0.2190922697385152 minutes
2025-02-20 12:02:34,768:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:34,768:INFO:Initializing create_model()
2025-02-20 12:02:34,782:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:34,782:INFO:Checking exceptions
2025-02-20 12:02:34,782:INFO:Importing libraries
2025-02-20 12:02:34,782:INFO:Copying training dataset
2025-02-20 12:02:34,782:INFO:Defining folds
2025-02-20 12:02:34,782:INFO:Declaring metric variables
2025-02-20 12:02:34,801:INFO:Importing untrained model
2025-02-20 12:02:34,801:INFO:Decision Tree Classifier Imported successfully
2025-02-20 12:02:34,824:INFO:Starting cross validation
2025-02-20 12:02:34,824:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:35,071:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,071:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,081:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,086:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,086:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,086:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,096:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,112:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,118:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,119:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,123:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,124:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,130:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,131:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,132:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,138:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,139:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,139:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,144:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,145:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,145:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,159:INFO:Calculating mean and std
2025-02-20 12:02:35,159:INFO:Creating metrics dataframe
2025-02-20 12:02:35,164:INFO:Uploading results into container
2025-02-20 12:02:35,164:INFO:Uploading model into container now
2025-02-20 12:02:35,164:INFO:_master_model_container: 4
2025-02-20 12:02:35,164:INFO:_display_container: 2
2025-02-20 12:02:35,164:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=2007, splitter='best')
2025-02-20 12:02:35,167:INFO:create_model() successfully completed......................................
2025-02-20 12:02:35,339:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:35,372:INFO:Creating metrics dataframe
2025-02-20 12:02:35,389:INFO:Initializing SVM - Linear Kernel
2025-02-20 12:02:35,389:INFO:Total runtime is 0.2294349431991577 minutes
2025-02-20 12:02:35,398:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:35,398:INFO:Initializing create_model()
2025-02-20 12:02:35,398:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:35,398:INFO:Checking exceptions
2025-02-20 12:02:35,398:INFO:Importing libraries
2025-02-20 12:02:35,398:INFO:Copying training dataset
2025-02-20 12:02:35,413:INFO:Defining folds
2025-02-20 12:02:35,413:INFO:Declaring metric variables
2025-02-20 12:02:35,417:INFO:Importing untrained model
2025-02-20 12:02:35,430:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 12:02:35,443:INFO:Starting cross validation
2025-02-20 12:02:35,447:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:35,664:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,672:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,676:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,678:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,678:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,684:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,684:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,684:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,684:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,684:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,684:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,701:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,701:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,706:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,706:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,706:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,706:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,706:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,706:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,721:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,737:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,737:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,737:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:35,768:INFO:Calculating mean and std
2025-02-20 12:02:35,768:INFO:Creating metrics dataframe
2025-02-20 12:02:35,768:INFO:Uploading results into container
2025-02-20 12:02:35,768:INFO:Uploading model into container now
2025-02-20 12:02:35,768:INFO:_master_model_container: 5
2025-02-20 12:02:35,768:INFO:_display_container: 2
2025-02-20 12:02:35,768:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=2007, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 12:02:35,768:INFO:create_model() successfully completed......................................
2025-02-20 12:02:35,945:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:35,945:INFO:Creating metrics dataframe
2025-02-20 12:02:35,961:INFO:Initializing Ridge Classifier
2025-02-20 12:02:35,961:INFO:Total runtime is 0.23896603981653847 minutes
2025-02-20 12:02:35,976:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:35,976:INFO:Initializing create_model()
2025-02-20 12:02:35,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:35,976:INFO:Checking exceptions
2025-02-20 12:02:35,976:INFO:Importing libraries
2025-02-20 12:02:35,976:INFO:Copying training dataset
2025-02-20 12:02:35,997:INFO:Defining folds
2025-02-20 12:02:35,997:INFO:Declaring metric variables
2025-02-20 12:02:36,009:INFO:Importing untrained model
2025-02-20 12:02:36,021:INFO:Ridge Classifier Imported successfully
2025-02-20 12:02:36,034:INFO:Starting cross validation
2025-02-20 12:02:36,038:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:36,251:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,264:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,279:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,295:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,295:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,295:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,295:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,311:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:36,326:INFO:Calculating mean and std
2025-02-20 12:02:36,326:INFO:Creating metrics dataframe
2025-02-20 12:02:36,330:INFO:Uploading results into container
2025-02-20 12:02:36,330:INFO:Uploading model into container now
2025-02-20 12:02:36,330:INFO:_master_model_container: 6
2025-02-20 12:02:36,333:INFO:_display_container: 2
2025-02-20 12:02:36,333:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2007, solver='auto',
                tol=0.0001)
2025-02-20 12:02:36,333:INFO:create_model() successfully completed......................................
2025-02-20 12:02:36,517:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:36,517:INFO:Creating metrics dataframe
2025-02-20 12:02:36,532:INFO:Initializing Random Forest Classifier
2025-02-20 12:02:36,533:INFO:Total runtime is 0.24850485722223914 minutes
2025-02-20 12:02:36,541:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:36,541:INFO:Initializing create_model()
2025-02-20 12:02:36,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:36,541:INFO:Checking exceptions
2025-02-20 12:02:36,541:INFO:Importing libraries
2025-02-20 12:02:36,541:INFO:Copying training dataset
2025-02-20 12:02:36,554:INFO:Defining folds
2025-02-20 12:02:36,554:INFO:Declaring metric variables
2025-02-20 12:02:36,564:INFO:Importing untrained model
2025-02-20 12:02:36,572:INFO:Random Forest Classifier Imported successfully
2025-02-20 12:02:36,585:INFO:Starting cross validation
2025-02-20 12:02:36,589:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:38,119:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,134:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,134:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,150:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,150:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,153:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,153:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,164:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,164:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,167:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,170:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,170:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,170:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,187:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,187:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,202:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,202:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,202:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,216:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,216:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,221:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,221:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,235:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,243:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,250:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,250:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,259:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,265:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,291:INFO:Calculating mean and std
2025-02-20 12:02:38,294:INFO:Creating metrics dataframe
2025-02-20 12:02:38,297:INFO:Uploading results into container
2025-02-20 12:02:38,298:INFO:Uploading model into container now
2025-02-20 12:02:38,299:INFO:_master_model_container: 7
2025-02-20 12:02:38,299:INFO:_display_container: 2
2025-02-20 12:02:38,299:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2007, verbose=0,
                       warm_start=False)
2025-02-20 12:02:38,300:INFO:create_model() successfully completed......................................
2025-02-20 12:02:38,476:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:38,476:INFO:Creating metrics dataframe
2025-02-20 12:02:38,508:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 12:02:38,508:INFO:Total runtime is 0.28141787449518835 minutes
2025-02-20 12:02:38,514:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:38,514:INFO:Initializing create_model()
2025-02-20 12:02:38,514:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:38,514:INFO:Checking exceptions
2025-02-20 12:02:38,514:INFO:Importing libraries
2025-02-20 12:02:38,514:INFO:Copying training dataset
2025-02-20 12:02:38,522:INFO:Defining folds
2025-02-20 12:02:38,522:INFO:Declaring metric variables
2025-02-20 12:02:38,531:INFO:Importing untrained model
2025-02-20 12:02:38,531:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 12:02:38,553:INFO:Starting cross validation
2025-02-20 12:02:38,560:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:38,730:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,730:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,745:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,745:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,745:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,745:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,745:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,761:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:02:38,777:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,777:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,777:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,777:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,795:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,813:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,813:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,817:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,820:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,820:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,830:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,845:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:38,892:INFO:Calculating mean and std
2025-02-20 12:02:38,892:INFO:Creating metrics dataframe
2025-02-20 12:02:38,892:INFO:Uploading results into container
2025-02-20 12:02:38,892:INFO:Uploading model into container now
2025-02-20 12:02:38,892:INFO:_master_model_container: 8
2025-02-20 12:02:38,892:INFO:_display_container: 2
2025-02-20 12:02:38,892:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 12:02:38,892:INFO:create_model() successfully completed......................................
2025-02-20 12:02:39,064:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:39,064:INFO:Creating metrics dataframe
2025-02-20 12:02:39,097:INFO:Initializing Ada Boost Classifier
2025-02-20 12:02:39,097:INFO:Total runtime is 0.29124060471852614 minutes
2025-02-20 12:02:39,109:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:39,109:INFO:Initializing create_model()
2025-02-20 12:02:39,109:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:39,109:INFO:Checking exceptions
2025-02-20 12:02:39,109:INFO:Importing libraries
2025-02-20 12:02:39,109:INFO:Copying training dataset
2025-02-20 12:02:39,130:INFO:Defining folds
2025-02-20 12:02:39,130:INFO:Declaring metric variables
2025-02-20 12:02:39,141:INFO:Importing untrained model
2025-02-20 12:02:39,153:INFO:Ada Boost Classifier Imported successfully
2025-02-20 12:02:39,169:INFO:Starting cross validation
2025-02-20 12:02:39,169:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:39,337:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,337:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,337:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,337:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,337:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,347:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,350:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,350:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,350:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,350:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,935:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:39,951:INFO:Calculating mean and std
2025-02-20 12:02:39,951:INFO:Creating metrics dataframe
2025-02-20 12:02:39,951:INFO:Uploading results into container
2025-02-20 12:02:39,951:INFO:Uploading model into container now
2025-02-20 12:02:39,951:INFO:_master_model_container: 9
2025-02-20 12:02:39,951:INFO:_display_container: 2
2025-02-20 12:02:39,951:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2007)
2025-02-20 12:02:39,951:INFO:create_model() successfully completed......................................
2025-02-20 12:02:40,170:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:40,182:INFO:Creating metrics dataframe
2025-02-20 12:02:40,206:INFO:Initializing Gradient Boosting Classifier
2025-02-20 12:02:40,206:INFO:Total runtime is 0.30972191890080764 minutes
2025-02-20 12:02:40,206:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:40,206:INFO:Initializing create_model()
2025-02-20 12:02:40,206:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:40,206:INFO:Checking exceptions
2025-02-20 12:02:40,206:INFO:Importing libraries
2025-02-20 12:02:40,206:INFO:Copying training dataset
2025-02-20 12:02:40,239:INFO:Defining folds
2025-02-20 12:02:40,240:INFO:Declaring metric variables
2025-02-20 12:02:40,252:INFO:Importing untrained model
2025-02-20 12:02:40,260:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 12:02:40,266:INFO:Starting cross validation
2025-02-20 12:02:40,280:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:41,879:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,895:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,895:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,926:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,926:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,942:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,957:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,966:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,966:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,966:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,966:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,971:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,997:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:41,997:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,013:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,013:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,044:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,080:INFO:Calculating mean and std
2025-02-20 12:02:42,080:INFO:Creating metrics dataframe
2025-02-20 12:02:42,080:INFO:Uploading results into container
2025-02-20 12:02:42,080:INFO:Uploading model into container now
2025-02-20 12:02:42,080:INFO:_master_model_container: 10
2025-02-20 12:02:42,080:INFO:_display_container: 2
2025-02-20 12:02:42,080:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=2007, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 12:02:42,080:INFO:create_model() successfully completed......................................
2025-02-20 12:02:42,262:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:42,277:INFO:Creating metrics dataframe
2025-02-20 12:02:42,298:INFO:Initializing Linear Discriminant Analysis
2025-02-20 12:02:42,298:INFO:Total runtime is 0.3445834358533223 minutes
2025-02-20 12:02:42,298:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:42,298:INFO:Initializing create_model()
2025-02-20 12:02:42,298:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:42,298:INFO:Checking exceptions
2025-02-20 12:02:42,298:INFO:Importing libraries
2025-02-20 12:02:42,298:INFO:Copying training dataset
2025-02-20 12:02:42,315:INFO:Defining folds
2025-02-20 12:02:42,315:INFO:Declaring metric variables
2025-02-20 12:02:42,328:INFO:Importing untrained model
2025-02-20 12:02:42,333:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 12:02:42,354:INFO:Starting cross validation
2025-02-20 12:02:42,354:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,579:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,593:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,593:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,593:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,597:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,597:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,597:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,597:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,597:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,601:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,602:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,602:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,602:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,602:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,605:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,605:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,605:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,605:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,605:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:42,633:INFO:Calculating mean and std
2025-02-20 12:02:42,633:INFO:Creating metrics dataframe
2025-02-20 12:02:42,633:INFO:Uploading results into container
2025-02-20 12:02:42,633:INFO:Uploading model into container now
2025-02-20 12:02:42,633:INFO:_master_model_container: 11
2025-02-20 12:02:42,633:INFO:_display_container: 2
2025-02-20 12:02:42,633:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 12:02:42,633:INFO:create_model() successfully completed......................................
2025-02-20 12:02:42,847:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:42,847:INFO:Creating metrics dataframe
2025-02-20 12:02:42,862:INFO:Initializing Extra Trees Classifier
2025-02-20 12:02:42,862:INFO:Total runtime is 0.3539775133132934 minutes
2025-02-20 12:02:42,868:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:42,868:INFO:Initializing create_model()
2025-02-20 12:02:42,868:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:42,868:INFO:Checking exceptions
2025-02-20 12:02:42,869:INFO:Importing libraries
2025-02-20 12:02:42,869:INFO:Copying training dataset
2025-02-20 12:02:42,878:INFO:Defining folds
2025-02-20 12:02:42,879:INFO:Declaring metric variables
2025-02-20 12:02:42,889:INFO:Importing untrained model
2025-02-20 12:02:42,897:INFO:Extra Trees Classifier Imported successfully
2025-02-20 12:02:42,920:INFO:Starting cross validation
2025-02-20 12:02:42,920:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:44,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,051:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,051:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,099:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,099:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,099:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,099:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,099:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,111:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,116:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,128:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,128:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,128:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,128:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,143:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,186:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,186:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,196:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:44,212:INFO:Calculating mean and std
2025-02-20 12:02:44,212:INFO:Creating metrics dataframe
2025-02-20 12:02:44,212:INFO:Uploading results into container
2025-02-20 12:02:44,212:INFO:Uploading model into container now
2025-02-20 12:02:44,212:INFO:_master_model_container: 12
2025-02-20 12:02:44,212:INFO:_display_container: 2
2025-02-20 12:02:44,212:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=2007, verbose=0,
                     warm_start=False)
2025-02-20 12:02:44,221:INFO:create_model() successfully completed......................................
2025-02-20 12:02:44,519:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:44,519:INFO:Creating metrics dataframe
2025-02-20 12:02:44,550:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 12:02:44,550:INFO:Total runtime is 0.3821146726608276 minutes
2025-02-20 12:02:44,550:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:44,550:INFO:Initializing create_model()
2025-02-20 12:02:44,550:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:44,550:INFO:Checking exceptions
2025-02-20 12:02:44,550:INFO:Importing libraries
2025-02-20 12:02:44,550:INFO:Copying training dataset
2025-02-20 12:02:44,564:INFO:Defining folds
2025-02-20 12:02:44,564:INFO:Declaring metric variables
2025-02-20 12:02:44,581:INFO:Importing untrained model
2025-02-20 12:02:44,588:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 12:02:44,606:INFO:Starting cross validation
2025-02-20 12:02:44,606:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:46,200:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,219:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,219:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,219:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,219:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,219:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,229:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,229:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,229:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,229:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,229:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,245:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,291:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,303:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,303:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,303:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,303:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,316:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,332:INFO:Calculating mean and std
2025-02-20 12:02:46,332:INFO:Creating metrics dataframe
2025-02-20 12:02:46,332:INFO:Uploading results into container
2025-02-20 12:02:46,339:INFO:Uploading model into container now
2025-02-20 12:02:46,341:INFO:_master_model_container: 13
2025-02-20 12:02:46,341:INFO:_display_container: 2
2025-02-20 12:02:46,341:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=2007, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 12:02:46,341:INFO:create_model() successfully completed......................................
2025-02-20 12:02:46,530:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:46,530:INFO:Creating metrics dataframe
2025-02-20 12:02:46,561:INFO:Initializing Dummy Classifier
2025-02-20 12:02:46,561:INFO:Total runtime is 0.41563109954198196 minutes
2025-02-20 12:02:46,561:INFO:SubProcess create_model() called ==================================
2025-02-20 12:02:46,561:INFO:Initializing create_model()
2025-02-20 12:02:46,561:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A8F050F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:46,561:INFO:Checking exceptions
2025-02-20 12:02:46,561:INFO:Importing libraries
2025-02-20 12:02:46,561:INFO:Copying training dataset
2025-02-20 12:02:46,593:INFO:Defining folds
2025-02-20 12:02:46,593:INFO:Declaring metric variables
2025-02-20 12:02:46,593:INFO:Importing untrained model
2025-02-20 12:02:46,601:INFO:Dummy Classifier Imported successfully
2025-02-20 12:02:46,622:INFO:Starting cross validation
2025-02-20 12:02:46,622:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:02:46,812:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,812:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,812:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,812:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,812:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,812:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,824:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,825:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,826:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,829:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,829:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,829:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,829:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,832:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,835:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,836:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,837:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,837:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,840:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,842:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,842:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,843:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,843:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,844:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,847:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,849:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,850:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,851:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,851:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,855:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,857:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,857:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,858:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,860:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,861:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,863:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,863:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,863:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:46,874:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:46,890:INFO:Calculating mean and std
2025-02-20 12:02:46,890:INFO:Creating metrics dataframe
2025-02-20 12:02:46,890:INFO:Uploading results into container
2025-02-20 12:02:46,890:INFO:Uploading model into container now
2025-02-20 12:02:46,897:INFO:_master_model_container: 14
2025-02-20 12:02:46,897:INFO:_display_container: 2
2025-02-20 12:02:46,898:INFO:DummyClassifier(constant=None, random_state=2007, strategy='prior')
2025-02-20 12:02:46,898:INFO:create_model() successfully completed......................................
2025-02-20 12:02:47,080:INFO:SubProcess create_model() end ==================================
2025-02-20 12:02:47,080:INFO:Creating metrics dataframe
2025-02-20 12:02:47,107:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 12:02:47,118:INFO:Initializing create_model()
2025-02-20 12:02:47,118:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2007, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:02:47,118:INFO:Checking exceptions
2025-02-20 12:02:47,131:INFO:Importing libraries
2025-02-20 12:02:47,131:INFO:Copying training dataset
2025-02-20 12:02:47,134:INFO:Defining folds
2025-02-20 12:02:47,134:INFO:Declaring metric variables
2025-02-20 12:02:47,134:INFO:Importing untrained model
2025-02-20 12:02:47,134:INFO:Declaring custom model
2025-02-20 12:02:47,134:INFO:Logistic Regression Imported successfully
2025-02-20 12:02:47,134:INFO:Cross validation set to False
2025-02-20 12:02:47,134:INFO:Fitting Model
2025-02-20 12:02:48,127:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:02:48,143:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2007, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:02:48,143:INFO:create_model() successfully completed......................................
2025-02-20 12:02:48,430:INFO:_master_model_container: 14
2025-02-20 12:02:48,430:INFO:_display_container: 2
2025-02-20 12:02:48,437:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2007, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:02:48,437:INFO:compare_models() successfully completed......................................
2025-02-20 12:02:48,621:INFO:Initializing predict_model()
2025-02-20 12:02:48,621:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2007, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A8DCFF40>)
2025-02-20 12:02:48,621:INFO:Checking exceptions
2025-02-20 12:02:48,624:INFO:Preloading libraries
2025-02-20 12:02:48,624:INFO:Set up data.
2025-02-20 12:02:48,632:INFO:Set up index.
2025-02-20 12:02:48,731:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 12:02:48,741:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:48,741:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:48,741:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:48,741:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:02:48,746:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:02:49,046:INFO:Initializing save_model()
2025-02-20 12:02:49,046:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2007, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 12:02:49,046:INFO:Adding model into prep_pipe
2025-02-20 12:02:49,053:INFO:LDA.pkl saved in current working directory
2025-02-20 12:02:49,066:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleIm...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2007,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 12:02:49,066:INFO:save_model() successfully completed......................................
2025-02-20 12:02:49,399:INFO:Initializing load_model()
2025-02-20 12:02:49,399:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 12:02:49,562:INFO:Initializing predict_model()
2025-02-20 12:02:49,562:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D39F33D6C0>)
2025-02-20 12:02:49,562:INFO:Checking exceptions
2025-02-20 12:02:49,564:INFO:Preloading libraries
2025-02-20 12:02:49,567:INFO:Set up data.
2025-02-20 12:02:49,570:INFO:Set up index.
2025-02-20 12:03:16,511:INFO:Initializing load_model()
2025-02-20 12:03:16,512:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 12:03:43,655:INFO:Initializing load_model()
2025-02-20 12:03:43,655:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 12:03:43,694:INFO:Initializing predict_model()
2025-02-20 12:03:43,694:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2007,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A8E940D0>)
2025-02-20 12:03:43,694:INFO:Checking exceptions
2025-02-20 12:03:43,694:INFO:Preloading libraries
2025-02-20 12:03:43,694:INFO:Set up data.
2025-02-20 12:03:43,702:INFO:Set up index.
2025-02-20 12:04:22,968:INFO:Initializing load_model()
2025-02-20 12:04:22,968:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 12:04:23,029:INFO:Initializing predict_model()
2025-02-20 12:04:23,029:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2007,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A8FC8670>)
2025-02-20 12:04:23,029:INFO:Checking exceptions
2025-02-20 12:04:23,029:INFO:Preloading libraries
2025-02-20 12:04:23,029:INFO:Set up data.
2025-02-20 12:04:23,053:INFO:Set up index.
2025-02-20 12:04:23,198:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:04:23,260:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:04:23,334:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:05:16,061:INFO:Initializing load_model()
2025-02-20 12:05:16,061:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 12:05:16,098:INFO:Initializing predict_model()
2025-02-20 12:05:16,098:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A8CF22F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2007,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A8E62440>)
2025-02-20 12:05:16,098:INFO:Checking exceptions
2025-02-20 12:05:16,098:INFO:Preloading libraries
2025-02-20 12:05:16,107:INFO:Set up data.
2025-02-20 12:05:16,107:INFO:Set up index.
2025-02-20 12:13:56,428:INFO:PyCaret ClassificationExperiment
2025-02-20 12:13:56,428:INFO:Logging name: clf-default-name
2025-02-20 12:13:56,428:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 12:13:56,428:INFO:version 3.3.2
2025-02-20 12:13:56,428:INFO:Initializing setup()
2025-02-20 12:13:56,428:INFO:self.USI: ec43
2025-02-20 12:13:56,428:INFO:self._variable_keys: {'X_train', 'pipeline', 'fix_imbalance', 'logging_param', 'log_plots_param', 'data', '_ml_usecase', 'idx', 'X', 'fold_shuffle_param', 'X_test', 'USI', 'target_param', 'gpu_param', 'fold_generator', 'html_param', 'y_train', 'fold_groups_param', 'gpu_n_jobs_param', 'memory', 'exp_id', 'n_jobs_param', 'exp_name_log', '_available_plots', 'y', 'seed', 'y_test', 'is_multiclass'}
2025-02-20 12:13:56,428:INFO:Checking environment
2025-02-20 12:13:56,428:INFO:python_version: 3.10.14
2025-02-20 12:13:56,436:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 12:13:56,436:INFO:machine: AMD64
2025-02-20 12:13:56,436:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 12:13:56,439:INFO:Memory: svmem(total=16766066688, available=4288131072, percent=74.4, used=12477935616, free=4288131072)
2025-02-20 12:13:56,439:INFO:Physical Core: 12
2025-02-20 12:13:56,439:INFO:Logical Core: 14
2025-02-20 12:13:56,439:INFO:Checking libraries
2025-02-20 12:13:56,439:INFO:System:
2025-02-20 12:13:56,439:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 12:13:56,439:INFO:executable: c:\Users\harsh\anaconda3\envs\ids\python.exe
2025-02-20 12:13:56,439:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 12:13:56,439:INFO:PyCaret required dependencies:
2025-02-20 12:13:56,439:INFO:                 pip: 25.0
2025-02-20 12:13:56,439:INFO:          setuptools: 75.8.0
2025-02-20 12:13:56,439:INFO:             pycaret: 3.3.2
2025-02-20 12:13:56,439:INFO:             IPython: 8.32.0
2025-02-20 12:13:56,452:INFO:          ipywidgets: 8.1.5
2025-02-20 12:13:56,452:INFO:                tqdm: 4.67.1
2025-02-20 12:13:56,452:INFO:               numpy: 1.26.4
2025-02-20 12:13:56,452:INFO:              pandas: 2.1.4
2025-02-20 12:13:56,452:INFO:              jinja2: 3.1.5
2025-02-20 12:13:56,453:INFO:               scipy: 1.11.4
2025-02-20 12:13:56,453:INFO:              joblib: 1.3.2
2025-02-20 12:13:56,453:INFO:             sklearn: 1.4.2
2025-02-20 12:13:56,453:INFO:                pyod: 2.0.3
2025-02-20 12:13:56,453:INFO:            imblearn: 0.13.0
2025-02-20 12:13:56,455:INFO:   category_encoders: 2.7.0
2025-02-20 12:13:56,455:INFO:            lightgbm: 4.6.0
2025-02-20 12:13:56,455:INFO:               numba: 0.61.0
2025-02-20 12:13:56,455:INFO:            requests: 2.32.3
2025-02-20 12:13:56,455:INFO:          matplotlib: 3.7.5
2025-02-20 12:13:56,455:INFO:          scikitplot: 0.3.7
2025-02-20 12:13:56,455:INFO:         yellowbrick: 1.5
2025-02-20 12:13:56,455:INFO:              plotly: 5.24.1
2025-02-20 12:13:56,455:INFO:    plotly-resampler: Not installed
2025-02-20 12:13:56,455:INFO:             kaleido: 0.2.1
2025-02-20 12:13:56,455:INFO:           schemdraw: 0.15
2025-02-20 12:13:56,455:INFO:         statsmodels: 0.14.4
2025-02-20 12:13:56,455:INFO:              sktime: 0.26.0
2025-02-20 12:13:56,455:INFO:               tbats: 1.1.3
2025-02-20 12:13:56,455:INFO:            pmdarima: 2.0.4
2025-02-20 12:13:56,455:INFO:              psutil: 6.1.1
2025-02-20 12:13:56,455:INFO:          markupsafe: 3.0.2
2025-02-20 12:13:56,455:INFO:             pickle5: Not installed
2025-02-20 12:13:56,455:INFO:         cloudpickle: 3.1.1
2025-02-20 12:13:56,455:INFO:         deprecation: 2.1.0
2025-02-20 12:13:56,455:INFO:              xxhash: 3.5.0
2025-02-20 12:13:56,455:INFO:           wurlitzer: Not installed
2025-02-20 12:13:56,455:INFO:PyCaret optional dependencies:
2025-02-20 12:13:56,455:INFO:                shap: Not installed
2025-02-20 12:13:56,455:INFO:           interpret: Not installed
2025-02-20 12:13:56,455:INFO:                umap: Not installed
2025-02-20 12:13:56,455:INFO:     ydata_profiling: Not installed
2025-02-20 12:13:56,455:INFO:  explainerdashboard: Not installed
2025-02-20 12:13:56,455:INFO:             autoviz: Not installed
2025-02-20 12:13:56,455:INFO:           fairlearn: Not installed
2025-02-20 12:13:56,455:INFO:          deepchecks: Not installed
2025-02-20 12:13:56,455:INFO:             xgboost: Not installed
2025-02-20 12:13:56,455:INFO:            catboost: Not installed
2025-02-20 12:13:56,455:INFO:              kmodes: Not installed
2025-02-20 12:13:56,455:INFO:             mlxtend: Not installed
2025-02-20 12:13:56,455:INFO:       statsforecast: Not installed
2025-02-20 12:13:56,455:INFO:        tune_sklearn: Not installed
2025-02-20 12:13:56,455:INFO:                 ray: Not installed
2025-02-20 12:13:56,455:INFO:            hyperopt: Not installed
2025-02-20 12:13:56,455:INFO:              optuna: Not installed
2025-02-20 12:13:56,455:INFO:               skopt: Not installed
2025-02-20 12:13:56,455:INFO:              mlflow: Not installed
2025-02-20 12:13:56,455:INFO:              gradio: Not installed
2025-02-20 12:13:56,455:INFO:             fastapi: Not installed
2025-02-20 12:13:56,455:INFO:             uvicorn: Not installed
2025-02-20 12:13:56,455:INFO:              m2cgen: Not installed
2025-02-20 12:13:56,455:INFO:           evidently: Not installed
2025-02-20 12:13:56,455:INFO:               fugue: Not installed
2025-02-20 12:13:56,455:INFO:           streamlit: Not installed
2025-02-20 12:13:56,455:INFO:             prophet: Not installed
2025-02-20 12:13:56,455:INFO:None
2025-02-20 12:13:56,455:INFO:Set up data.
2025-02-20 12:13:56,471:INFO:Set up folding strategy.
2025-02-20 12:13:56,472:INFO:Set up train/test split.
2025-02-20 12:13:56,480:INFO:Set up index.
2025-02-20 12:13:56,480:INFO:Assigning column types.
2025-02-20 12:13:56,488:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 12:13:56,539:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 12:13:56,539:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:13:56,576:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,576:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,640:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 12:13:56,640:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:13:56,681:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,681:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,681:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 12:13:56,754:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:13:56,823:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,823:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,876:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:13:56,913:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,913:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:56,913:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 12:13:57,012:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:57,012:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:57,105:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:57,105:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:57,105:INFO:Preparing preprocessing pipeline...
2025-02-20 12:13:57,105:INFO:Set up label encoding.
2025-02-20 12:13:57,105:INFO:Set up simple imputation.
2025-02-20 12:13:57,113:INFO:Set up encoding of categorical features.
2025-02-20 12:13:57,113:INFO:Set up column name cleaning.
2025-02-20 12:13:57,322:INFO:Finished creating preprocessing pipeline.
2025-02-20 12:13:57,322:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 12:13:57,322:INFO:Creating final display dataframe.
2025-02-20 12:13:57,831:INFO:Setup _display_container:                     Description             Value
0                    Session id              7587
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 10)
5        Transformed data shape        (7032, 15)
6   Transformed train set shape        (4922, 15)
7    Transformed test set shape        (2110, 15)
8              Numeric features                 7
9          Categorical features                 2
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              ec43
2025-02-20 12:13:57,935:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:57,936:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:58,022:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:58,022:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:13:58,022:INFO:setup() successfully completed in 1.6s...............
2025-02-20 12:13:58,055:INFO:Initializing compare_models()
2025-02-20 12:13:58,055:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 12:13:58,055:INFO:Checking exceptions
2025-02-20 12:13:58,058:INFO:Preparing display monitor
2025-02-20 12:13:58,098:INFO:Initializing Logistic Regression
2025-02-20 12:13:58,100:INFO:Total runtime is 4.094441731770833e-05 minutes
2025-02-20 12:13:58,105:INFO:SubProcess create_model() called ==================================
2025-02-20 12:13:58,107:INFO:Initializing create_model()
2025-02-20 12:13:58,107:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:13:58,107:INFO:Checking exceptions
2025-02-20 12:13:58,107:INFO:Importing libraries
2025-02-20 12:13:58,107:INFO:Copying training dataset
2025-02-20 12:13:58,118:INFO:Defining folds
2025-02-20 12:13:58,118:INFO:Declaring metric variables
2025-02-20 12:13:58,118:INFO:Importing untrained model
2025-02-20 12:13:58,126:INFO:Logistic Regression Imported successfully
2025-02-20 12:13:58,140:INFO:Starting cross validation
2025-02-20 12:13:58,142:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:13:58,589:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:13:58,622:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:58,634:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:58,639:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,056:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:13:59,105:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,115:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,523:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:13:59,556:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,572:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,572:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:13:59,828:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\joblib\externals\loky\process_executor.py:752: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.
  warnings.warn(

2025-02-20 12:14:00,089:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:00,150:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:00,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:00,156:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:00,697:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:00,739:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:00,755:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:00,755:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,840:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:03,856:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:03,856:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:03,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:03,890:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,901:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,905:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,905:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,907:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,907:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,907:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,907:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:14:03,917:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,917:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,922:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,933:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,940:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,956:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,965:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:03,973:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:04,619:INFO:Calculating mean and std
2025-02-20 12:14:04,623:INFO:Creating metrics dataframe
2025-02-20 12:14:04,623:INFO:Uploading results into container
2025-02-20 12:14:04,623:INFO:Uploading model into container now
2025-02-20 12:14:04,623:INFO:_master_model_container: 1
2025-02-20 12:14:04,623:INFO:_display_container: 2
2025-02-20 12:14:04,623:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7587, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:14:04,623:INFO:create_model() successfully completed......................................
2025-02-20 12:14:04,835:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:04,835:INFO:Creating metrics dataframe
2025-02-20 12:14:04,840:INFO:Initializing K Neighbors Classifier
2025-02-20 12:14:04,840:INFO:Total runtime is 0.11237789392471313 minutes
2025-02-20 12:14:04,856:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:04,856:INFO:Initializing create_model()
2025-02-20 12:14:04,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:04,856:INFO:Checking exceptions
2025-02-20 12:14:04,856:INFO:Importing libraries
2025-02-20 12:14:04,856:INFO:Copying training dataset
2025-02-20 12:14:04,867:INFO:Defining folds
2025-02-20 12:14:04,867:INFO:Declaring metric variables
2025-02-20 12:14:04,874:INFO:Importing untrained model
2025-02-20 12:14:04,883:INFO:K Neighbors Classifier Imported successfully
2025-02-20 12:14:04,890:INFO:Starting cross validation
2025-02-20 12:14:04,899:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:05,439:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,449:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,456:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,473:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,481:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,481:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,489:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,489:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,497:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,530:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,530:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,545:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,545:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,561:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:05,561:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,506:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,511:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,521:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,521:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,529:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,529:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,529:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,539:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,539:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,539:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,539:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,555:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,556:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:08,585:INFO:Calculating mean and std
2025-02-20 12:14:08,588:INFO:Creating metrics dataframe
2025-02-20 12:14:08,592:INFO:Uploading results into container
2025-02-20 12:14:08,594:INFO:Uploading model into container now
2025-02-20 12:14:08,594:INFO:_master_model_container: 2
2025-02-20 12:14:08,594:INFO:_display_container: 2
2025-02-20 12:14:08,594:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 12:14:08,594:INFO:create_model() successfully completed......................................
2025-02-20 12:14:08,749:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:08,749:INFO:Creating metrics dataframe
2025-02-20 12:14:08,764:INFO:Initializing Naive Bayes
2025-02-20 12:14:08,764:INFO:Total runtime is 0.17777615388234458 minutes
2025-02-20 12:14:08,764:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:08,764:INFO:Initializing create_model()
2025-02-20 12:14:08,764:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:08,780:INFO:Checking exceptions
2025-02-20 12:14:08,780:INFO:Importing libraries
2025-02-20 12:14:08,780:INFO:Copying training dataset
2025-02-20 12:14:08,780:INFO:Defining folds
2025-02-20 12:14:08,780:INFO:Declaring metric variables
2025-02-20 12:14:08,796:INFO:Importing untrained model
2025-02-20 12:14:08,796:INFO:Naive Bayes Imported successfully
2025-02-20 12:14:08,815:INFO:Starting cross validation
2025-02-20 12:14:08,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:09,051:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,065:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,068:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,068:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,068:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,068:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,073:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,077:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,077:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:09,078:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,787:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,787:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,802:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,802:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,802:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,802:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,873:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:11,905:INFO:Calculating mean and std
2025-02-20 12:14:11,905:INFO:Creating metrics dataframe
2025-02-20 12:14:11,905:INFO:Uploading results into container
2025-02-20 12:14:11,905:INFO:Uploading model into container now
2025-02-20 12:14:11,905:INFO:_master_model_container: 3
2025-02-20 12:14:11,905:INFO:_display_container: 2
2025-02-20 12:14:11,905:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 12:14:11,905:INFO:create_model() successfully completed......................................
2025-02-20 12:14:12,063:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:12,063:INFO:Creating metrics dataframe
2025-02-20 12:14:12,090:INFO:Initializing Decision Tree Classifier
2025-02-20 12:14:12,090:INFO:Total runtime is 0.23319873412450157 minutes
2025-02-20 12:14:12,090:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:12,090:INFO:Initializing create_model()
2025-02-20 12:14:12,090:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:12,090:INFO:Checking exceptions
2025-02-20 12:14:12,090:INFO:Importing libraries
2025-02-20 12:14:12,090:INFO:Copying training dataset
2025-02-20 12:14:12,109:INFO:Defining folds
2025-02-20 12:14:12,109:INFO:Declaring metric variables
2025-02-20 12:14:12,117:INFO:Importing untrained model
2025-02-20 12:14:12,129:INFO:Decision Tree Classifier Imported successfully
2025-02-20 12:14:12,145:INFO:Starting cross validation
2025-02-20 12:14:12,149:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:12,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,376:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,388:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,391:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,404:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,420:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,420:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,420:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,451:INFO:Calculating mean and std
2025-02-20 12:14:12,451:INFO:Creating metrics dataframe
2025-02-20 12:14:12,451:INFO:Uploading results into container
2025-02-20 12:14:12,451:INFO:Uploading model into container now
2025-02-20 12:14:12,451:INFO:_master_model_container: 4
2025-02-20 12:14:12,451:INFO:_display_container: 2
2025-02-20 12:14:12,451:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=7587, splitter='best')
2025-02-20 12:14:12,451:INFO:create_model() successfully completed......................................
2025-02-20 12:14:12,621:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:12,621:INFO:Creating metrics dataframe
2025-02-20 12:14:12,637:INFO:Initializing SVM - Linear Kernel
2025-02-20 12:14:12,637:INFO:Total runtime is 0.24232411384582522 minutes
2025-02-20 12:14:12,637:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:12,637:INFO:Initializing create_model()
2025-02-20 12:14:12,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:12,637:INFO:Checking exceptions
2025-02-20 12:14:12,637:INFO:Importing libraries
2025-02-20 12:14:12,637:INFO:Copying training dataset
2025-02-20 12:14:12,653:INFO:Defining folds
2025-02-20 12:14:12,653:INFO:Declaring metric variables
2025-02-20 12:14:12,676:INFO:Importing untrained model
2025-02-20 12:14:12,685:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 12:14:12,705:INFO:Starting cross validation
2025-02-20 12:14:12,705:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:12,958:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,959:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,963:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,964:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,967:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,972:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,974:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,977:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,977:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,978:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,981:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,990:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:12,993:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,006:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,006:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,021:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,037:INFO:Calculating mean and std
2025-02-20 12:14:13,037:INFO:Creating metrics dataframe
2025-02-20 12:14:13,037:INFO:Uploading results into container
2025-02-20 12:14:13,037:INFO:Uploading model into container now
2025-02-20 12:14:13,037:INFO:_master_model_container: 5
2025-02-20 12:14:13,037:INFO:_display_container: 2
2025-02-20 12:14:13,037:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=7587, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 12:14:13,037:INFO:create_model() successfully completed......................................
2025-02-20 12:14:13,222:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:13,222:INFO:Creating metrics dataframe
2025-02-20 12:14:13,259:INFO:Initializing Ridge Classifier
2025-02-20 12:14:13,259:INFO:Total runtime is 0.2526867190996806 minutes
2025-02-20 12:14:13,267:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:13,267:INFO:Initializing create_model()
2025-02-20 12:14:13,271:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:13,271:INFO:Checking exceptions
2025-02-20 12:14:13,271:INFO:Importing libraries
2025-02-20 12:14:13,271:INFO:Copying training dataset
2025-02-20 12:14:13,276:INFO:Defining folds
2025-02-20 12:14:13,276:INFO:Declaring metric variables
2025-02-20 12:14:13,288:INFO:Importing untrained model
2025-02-20 12:14:13,288:INFO:Ridge Classifier Imported successfully
2025-02-20 12:14:13,318:INFO:Starting cross validation
2025-02-20 12:14:13,321:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:13,490:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,505:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,505:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,505:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,505:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,521:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,521:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,521:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,527:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,527:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,527:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,527:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,527:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,537:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,537:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,537:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,537:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,537:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,537:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,552:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,568:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,568:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,568:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,568:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:13,608:INFO:Calculating mean and std
2025-02-20 12:14:13,609:INFO:Creating metrics dataframe
2025-02-20 12:14:13,612:INFO:Uploading results into container
2025-02-20 12:14:13,613:INFO:Uploading model into container now
2025-02-20 12:14:13,613:INFO:_master_model_container: 6
2025-02-20 12:14:13,613:INFO:_display_container: 2
2025-02-20 12:14:13,614:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=7587, solver='auto',
                tol=0.0001)
2025-02-20 12:14:13,614:INFO:create_model() successfully completed......................................
2025-02-20 12:14:13,818:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:13,818:INFO:Creating metrics dataframe
2025-02-20 12:14:13,822:INFO:Initializing Random Forest Classifier
2025-02-20 12:14:13,822:INFO:Total runtime is 0.26207133531570437 minutes
2025-02-20 12:14:13,834:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:13,837:INFO:Initializing create_model()
2025-02-20 12:14:13,837:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:13,837:INFO:Checking exceptions
2025-02-20 12:14:13,837:INFO:Importing libraries
2025-02-20 12:14:13,837:INFO:Copying training dataset
2025-02-20 12:14:13,850:INFO:Defining folds
2025-02-20 12:14:13,850:INFO:Declaring metric variables
2025-02-20 12:14:13,859:INFO:Importing untrained model
2025-02-20 12:14:13,859:INFO:Random Forest Classifier Imported successfully
2025-02-20 12:14:13,876:INFO:Starting cross validation
2025-02-20 12:14:13,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:15,239:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,255:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,255:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,274:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,274:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,274:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,274:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,274:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,284:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,284:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,284:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,287:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,288:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,301:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,305:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,326:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,339:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,354:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,362:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,394:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,394:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,405:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,434:INFO:Calculating mean and std
2025-02-20 12:14:15,434:INFO:Creating metrics dataframe
2025-02-20 12:14:15,434:INFO:Uploading results into container
2025-02-20 12:14:15,443:INFO:Uploading model into container now
2025-02-20 12:14:15,445:INFO:_master_model_container: 7
2025-02-20 12:14:15,445:INFO:_display_container: 2
2025-02-20 12:14:15,445:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=7587, verbose=0,
                       warm_start=False)
2025-02-20 12:14:15,445:INFO:create_model() successfully completed......................................
2025-02-20 12:14:15,604:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:15,604:INFO:Creating metrics dataframe
2025-02-20 12:14:15,614:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 12:14:15,614:INFO:Total runtime is 0.2919395128885905 minutes
2025-02-20 12:14:15,630:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:15,630:INFO:Initializing create_model()
2025-02-20 12:14:15,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:15,630:INFO:Checking exceptions
2025-02-20 12:14:15,630:INFO:Importing libraries
2025-02-20 12:14:15,630:INFO:Copying training dataset
2025-02-20 12:14:15,655:INFO:Defining folds
2025-02-20 12:14:15,655:INFO:Declaring metric variables
2025-02-20 12:14:15,666:INFO:Importing untrained model
2025-02-20 12:14:15,676:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 12:14:15,690:INFO:Starting cross validation
2025-02-20 12:14:15,694:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:15,820:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,839:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,841:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,862:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,864:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,868:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,869:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,870:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,877:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,877:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,877:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:14:15,877:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,888:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,904:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,919:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,935:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,935:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,935:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,935:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,938:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:15,959:INFO:Calculating mean and std
2025-02-20 12:14:15,959:INFO:Creating metrics dataframe
2025-02-20 12:14:15,959:INFO:Uploading results into container
2025-02-20 12:14:15,959:INFO:Uploading model into container now
2025-02-20 12:14:15,959:INFO:_master_model_container: 8
2025-02-20 12:14:15,959:INFO:_display_container: 2
2025-02-20 12:14:15,967:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 12:14:15,967:INFO:create_model() successfully completed......................................
2025-02-20 12:14:16,157:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:16,157:INFO:Creating metrics dataframe
2025-02-20 12:14:16,170:INFO:Initializing Ada Boost Classifier
2025-02-20 12:14:16,170:INFO:Total runtime is 0.3012059013048808 minutes
2025-02-20 12:14:16,170:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:16,170:INFO:Initializing create_model()
2025-02-20 12:14:16,170:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:16,170:INFO:Checking exceptions
2025-02-20 12:14:16,170:INFO:Importing libraries
2025-02-20 12:14:16,186:INFO:Copying training dataset
2025-02-20 12:14:16,186:INFO:Defining folds
2025-02-20 12:14:16,186:INFO:Declaring metric variables
2025-02-20 12:14:16,204:INFO:Importing untrained model
2025-02-20 12:14:16,211:INFO:Ada Boost Classifier Imported successfully
2025-02-20 12:14:16,233:INFO:Starting cross validation
2025-02-20 12:14:16,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:16,358:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,361:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,374:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,374:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,389:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,389:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,389:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,389:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,389:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,405:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:14:16,878:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,890:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,890:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,906:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,906:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,906:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,906:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,922:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,922:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,922:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,922:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,922:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,937:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,953:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,953:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,953:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,953:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,953:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,969:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:16,985:INFO:Calculating mean and std
2025-02-20 12:14:16,985:INFO:Creating metrics dataframe
2025-02-20 12:14:16,985:INFO:Uploading results into container
2025-02-20 12:14:16,985:INFO:Uploading model into container now
2025-02-20 12:14:16,985:INFO:_master_model_container: 9
2025-02-20 12:14:16,985:INFO:_display_container: 2
2025-02-20 12:14:16,985:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=7587)
2025-02-20 12:14:16,993:INFO:create_model() successfully completed......................................
2025-02-20 12:14:17,170:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:17,170:INFO:Creating metrics dataframe
2025-02-20 12:14:17,204:INFO:Initializing Gradient Boosting Classifier
2025-02-20 12:14:17,204:INFO:Total runtime is 0.3184436082839966 minutes
2025-02-20 12:14:17,204:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:17,204:INFO:Initializing create_model()
2025-02-20 12:14:17,204:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:17,204:INFO:Checking exceptions
2025-02-20 12:14:17,204:INFO:Importing libraries
2025-02-20 12:14:17,204:INFO:Copying training dataset
2025-02-20 12:14:17,220:INFO:Defining folds
2025-02-20 12:14:17,220:INFO:Declaring metric variables
2025-02-20 12:14:17,238:INFO:Importing untrained model
2025-02-20 12:14:17,238:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 12:14:17,264:INFO:Starting cross validation
2025-02-20 12:14:17,264:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:18,920:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,920:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,936:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,973:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,976:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:18,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,007:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,007:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,007:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,007:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,007:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,022:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,054:INFO:Calculating mean and std
2025-02-20 12:14:19,054:INFO:Creating metrics dataframe
2025-02-20 12:14:19,054:INFO:Uploading results into container
2025-02-20 12:14:19,054:INFO:Uploading model into container now
2025-02-20 12:14:19,054:INFO:_master_model_container: 10
2025-02-20 12:14:19,054:INFO:_display_container: 2
2025-02-20 12:14:19,054:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7587, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 12:14:19,054:INFO:create_model() successfully completed......................................
2025-02-20 12:14:19,250:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:19,250:INFO:Creating metrics dataframe
2025-02-20 12:14:19,288:INFO:Initializing Linear Discriminant Analysis
2025-02-20 12:14:19,290:INFO:Total runtime is 0.3532108704249064 minutes
2025-02-20 12:14:19,308:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:19,308:INFO:Initializing create_model()
2025-02-20 12:14:19,308:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:19,308:INFO:Checking exceptions
2025-02-20 12:14:19,308:INFO:Importing libraries
2025-02-20 12:14:19,308:INFO:Copying training dataset
2025-02-20 12:14:19,326:INFO:Defining folds
2025-02-20 12:14:19,326:INFO:Declaring metric variables
2025-02-20 12:14:19,329:INFO:Importing untrained model
2025-02-20 12:14:19,346:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 12:14:19,362:INFO:Starting cross validation
2025-02-20 12:14:19,362:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:19,523:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,538:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,538:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,538:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,570:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,585:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,585:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,585:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,585:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,585:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,585:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,601:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,604:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:19,617:INFO:Calculating mean and std
2025-02-20 12:14:19,617:INFO:Creating metrics dataframe
2025-02-20 12:14:19,625:INFO:Uploading results into container
2025-02-20 12:14:19,626:INFO:Uploading model into container now
2025-02-20 12:14:19,626:INFO:_master_model_container: 11
2025-02-20 12:14:19,626:INFO:_display_container: 2
2025-02-20 12:14:19,626:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 12:14:19,626:INFO:create_model() successfully completed......................................
2025-02-20 12:14:19,780:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:19,780:INFO:Creating metrics dataframe
2025-02-20 12:14:19,807:INFO:Initializing Extra Trees Classifier
2025-02-20 12:14:19,807:INFO:Total runtime is 0.36182265281677245 minutes
2025-02-20 12:14:19,816:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:19,822:INFO:Initializing create_model()
2025-02-20 12:14:19,822:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:19,822:INFO:Checking exceptions
2025-02-20 12:14:19,822:INFO:Importing libraries
2025-02-20 12:14:19,822:INFO:Copying training dataset
2025-02-20 12:14:19,828:INFO:Defining folds
2025-02-20 12:14:19,828:INFO:Declaring metric variables
2025-02-20 12:14:19,846:INFO:Importing untrained model
2025-02-20 12:14:19,854:INFO:Extra Trees Classifier Imported successfully
2025-02-20 12:14:19,877:INFO:Starting cross validation
2025-02-20 12:14:19,877:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:20,995:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,004:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,004:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,026:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,026:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,026:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,026:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,035:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,050:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,050:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,050:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,071:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,076:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,090:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,106:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,121:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,121:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,138:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,142:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:21,168:INFO:Calculating mean and std
2025-02-20 12:14:21,171:INFO:Creating metrics dataframe
2025-02-20 12:14:21,172:INFO:Uploading results into container
2025-02-20 12:14:21,174:INFO:Uploading model into container now
2025-02-20 12:14:21,174:INFO:_master_model_container: 12
2025-02-20 12:14:21,174:INFO:_display_container: 2
2025-02-20 12:14:21,174:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=7587, verbose=0,
                     warm_start=False)
2025-02-20 12:14:21,174:INFO:create_model() successfully completed......................................
2025-02-20 12:14:21,322:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:21,322:INFO:Creating metrics dataframe
2025-02-20 12:14:21,338:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 12:14:21,338:INFO:Total runtime is 0.3873384118080139 minutes
2025-02-20 12:14:21,354:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:21,354:INFO:Initializing create_model()
2025-02-20 12:14:21,354:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:21,354:INFO:Checking exceptions
2025-02-20 12:14:21,354:INFO:Importing libraries
2025-02-20 12:14:21,354:INFO:Copying training dataset
2025-02-20 12:14:21,374:INFO:Defining folds
2025-02-20 12:14:21,408:INFO:Declaring metric variables
2025-02-20 12:14:21,412:INFO:Importing untrained model
2025-02-20 12:14:21,425:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 12:14:21,440:INFO:Starting cross validation
2025-02-20 12:14:21,443:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:22,944:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,960:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,968:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,975:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,975:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,982:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,991:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,992:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:22,996:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,002:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,017:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,017:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,017:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,017:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,033:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,033:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,048:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,054:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,054:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,060:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,073:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,073:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,073:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,073:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,104:INFO:Calculating mean and std
2025-02-20 12:14:23,104:INFO:Creating metrics dataframe
2025-02-20 12:14:23,104:INFO:Uploading results into container
2025-02-20 12:14:23,111:INFO:Uploading model into container now
2025-02-20 12:14:23,113:INFO:_master_model_container: 13
2025-02-20 12:14:23,114:INFO:_display_container: 2
2025-02-20 12:14:23,114:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=7587, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 12:14:23,114:INFO:create_model() successfully completed......................................
2025-02-20 12:14:23,287:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:23,287:INFO:Creating metrics dataframe
2025-02-20 12:14:23,302:INFO:Initializing Dummy Classifier
2025-02-20 12:14:23,302:INFO:Total runtime is 0.4200790325800578 minutes
2025-02-20 12:14:23,318:INFO:SubProcess create_model() called ==================================
2025-02-20 12:14:23,318:INFO:Initializing create_model()
2025-02-20 12:14:23,318:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D3A47DF790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:23,318:INFO:Checking exceptions
2025-02-20 12:14:23,318:INFO:Importing libraries
2025-02-20 12:14:23,318:INFO:Copying training dataset
2025-02-20 12:14:23,334:INFO:Defining folds
2025-02-20 12:14:23,341:INFO:Declaring metric variables
2025-02-20 12:14:23,348:INFO:Importing untrained model
2025-02-20 12:14:23,359:INFO:Dummy Classifier Imported successfully
2025-02-20 12:14:23,371:INFO:Starting cross validation
2025-02-20 12:14:23,379:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:14:23,538:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,538:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,554:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,569:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,571:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,578:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,578:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,588:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,603:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,603:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,603:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,603:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,603:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:23,603:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,619:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:23,634:INFO:Calculating mean and std
2025-02-20 12:14:23,637:INFO:Creating metrics dataframe
2025-02-20 12:14:23,641:INFO:Uploading results into container
2025-02-20 12:14:23,642:INFO:Uploading model into container now
2025-02-20 12:14:23,642:INFO:_master_model_container: 14
2025-02-20 12:14:23,642:INFO:_display_container: 2
2025-02-20 12:14:23,642:INFO:DummyClassifier(constant=None, random_state=7587, strategy='prior')
2025-02-20 12:14:23,642:INFO:create_model() successfully completed......................................
2025-02-20 12:14:23,805:INFO:SubProcess create_model() end ==================================
2025-02-20 12:14:23,805:INFO:Creating metrics dataframe
2025-02-20 12:14:23,820:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 12:14:23,856:INFO:Initializing create_model()
2025-02-20 12:14:23,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:14:23,856:INFO:Checking exceptions
2025-02-20 12:14:23,863:INFO:Importing libraries
2025-02-20 12:14:23,863:INFO:Copying training dataset
2025-02-20 12:14:23,879:INFO:Defining folds
2025-02-20 12:14:23,879:INFO:Declaring metric variables
2025-02-20 12:14:23,879:INFO:Importing untrained model
2025-02-20 12:14:23,879:INFO:Declaring custom model
2025-02-20 12:14:23,882:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 12:14:23,883:INFO:Cross validation set to False
2025-02-20 12:14:23,883:INFO:Fitting Model
2025-02-20 12:14:24,024:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 12:14:24,024:INFO:create_model() successfully completed......................................
2025-02-20 12:14:24,421:INFO:_master_model_container: 14
2025-02-20 12:14:24,421:INFO:_display_container: 2
2025-02-20 12:14:24,421:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 12:14:24,421:INFO:compare_models() successfully completed......................................
2025-02-20 12:14:24,631:INFO:Initializing predict_model()
2025-02-20 12:14:24,631:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A8E639A0>)
2025-02-20 12:14:24,631:INFO:Checking exceptions
2025-02-20 12:14:24,631:INFO:Preloading libraries
2025-02-20 12:14:24,637:INFO:Set up data.
2025-02-20 12:14:24,640:INFO:Set up index.
2025-02-20 12:14:24,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 12:14:24,726:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:24,734:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:24,734:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:24,734:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:24,738:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:14:24,738:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:14:24,738:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 12:14:24,738:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 12:14:24,738:WARNING:c:\Users\harsh\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 12:14:25,017:INFO:Initializing save_model()
2025-02-20 12:14:25,017:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                    include=['Contract', 'PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['Contract',
                                                                    'PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 12:14:25,017:INFO:Adding model into prep_pipe
2025-02-20 12:14:25,037:INFO:GBC.pkl saved in current working directory
2025-02-20 12:14:25,050:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleIm...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-02-20 12:14:25,052:INFO:save_model() successfully completed......................................
2025-02-20 12:14:25,408:INFO:Initializing load_model()
2025-02-20 12:14:25,408:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 12:14:25,572:INFO:Initializing predict_model()
2025-02-20 12:14:25,572:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D3A913A8F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\harsh\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_TotalCharges_rat...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D3A8E629E0>)
2025-02-20 12:14:25,572:INFO:Checking exceptions
2025-02-20 12:14:25,572:INFO:Preloading libraries
2025-02-20 12:14:25,585:INFO:Set up data.
2025-02-20 12:14:25,591:INFO:Set up index.
